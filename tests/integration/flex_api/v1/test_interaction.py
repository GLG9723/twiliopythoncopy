# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from tests import IntegrationTestCase
from tests.holodeck import Request
from twilio.base import serialize
from twilio.base.exceptions import TwilioException
from twilio.http.response import Response


class InteractionTestCase(IntegrationTestCase):

    def test_fetch_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.flex_api.v1.interaction("KDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://flex-api.twilio.com/v1/Interactions/KDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        ))

    def test_fetch_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "sid": "KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "channel": {
                    "type": "email"
                },
                "routing": {
                    "properties": {
                        "workflow_sid": "WWxx",
                        "attributes": "WWxx",
                        "task_channel_unique_name": "email",
                        "routing_target": "WKXX",
                        "queue_name": "WQXX"
                    }
                },
                "url": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "links": {
                    "channels": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels"
                }
            }
            '''
        ))

        actual = self.client.flex_api.v1.interaction("KDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.assertIsNotNone(actual)

    def test_create_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.flex_api.v1.interaction.create(channel={}, routing={})

        values = {'Channel': serialize.object({}), 'Routing': serialize.object({}), }

        self.holodeck.assert_has_request(Request(
            'post',
            'https://flex-api.twilio.com/v1/Interactions',
            data=values,
        ))

    def test_create_response(self):
        self.holodeck.mock(Response(
            201,
            '''
            {
                "sid": "KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "channel": {
                    "type": "email"
                },
                "routing": {
                    "properties": {
                        "workflow_sid": "WWxx",
                        "attributes": "WWxx",
                        "task_channel_unique_name": "email",
                        "routing_target": "WKXX",
                        "queue_name": "WQXX"
                    }
                },
                "url": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "links": {
                    "channels": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels"
                }
            }
            '''
        ))

        actual = self.client.flex_api.v1.interaction.create(channel={}, routing={})

        self.assertIsNotNone(actual)
