"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Video
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource

from twilio.base.page import Page




class CompositionContext(InstanceContext):
    def __init__(self, version: V1, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'sid': sid,  }
        self._uri = '/Compositions/${sid}'
        
    
    def delete(self):
        
        
        """
        Deletes the CompositionInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )
    
    def fetch(self):
        
        """
        Fetch the CompositionInstance

        :returns: The fetched CompositionInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )
        return CompositionInstance(
            self._version,
            payload,
            sid=self._solution['sid'],
        )
        
        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.CompositionContext>'



class CompositionInstance(InstanceResource):
    def __init__(self, version, payload, sid: str):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'status' : payload.get('status'),
            'date_created' : payload.get('date_created'),
            'date_completed' : payload.get('date_completed'),
            'date_deleted' : payload.get('date_deleted'),
            'sid' : payload.get('sid'),
            'room_sid' : payload.get('room_sid'),
            'audio_sources' : payload.get('audio_sources'),
            'audio_sources_excluded' : payload.get('audio_sources_excluded'),
            'video_layout' : payload.get('video_layout'),
            'resolution' : payload.get('resolution'),
            'trim' : payload.get('trim'),
            'format' : payload.get('format'),
            'bitrate' : payload.get('bitrate'),
            'size' : payload.get('size'),
            'duration' : payload.get('duration'),
            'media_external_location' : payload.get('media_external_location'),
            'status_callback' : payload.get('status_callback'),
            'status_callback_method' : payload.get('status_callback_method'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'sid': sid or self._properties['sid']
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = CompositionContext(
                self._version,
                sid=self._solution['sid'],
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.CompositionInstance {}>'.format(context)



class CompositionListInstance(ListResource):
    def __init__(self, version: V1):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Compositions'
        
    
    def create(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.create(method='post', uri=self._uri, data=data, )

        return CompositionInstance(self._version, payload, )
        
    
    def page(self, status, date_created_after, date_created_before, room_sid, page_size):
        
        data = values.of({
            'status': status,'date_created_after': date_created_after,'date_created_before': date_created_before,'room_sid': room_sid,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return CompositionPage(self._version, payload, )
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.CompositionListInstance>'

