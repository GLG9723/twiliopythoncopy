"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Video
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# from twilio.rest.room.participant import ParticipantListInstancefrom twilio.rest.room.recording_rules import RecordingRulesListInstancefrom twilio.rest.room.room_recording import RoomRecordingListInstance


class RoomContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'sid': sid,  }
        self._uri = '/Rooms/${sid}'
        
        self._participants = None
        self._recording_rules = None
        self._recordings = None
    
    def fetch(self):
        
        """
        Fetch the RoomInstance

        :returns: The fetched RoomInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return RoomInstance(self._version, payload, sid=self._solution['sid'], )
        

        
    
    def update(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return RoomInstance(self._version, payload, sid=self._solution['sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.RoomContext>'



class RoomInstance(InstanceResource):
    def __init__(self, version, payload, sid: str):
        super().__init__(version)
        self._properties = { 
            'sid' : payload.get('sid'),
            'status' : payload.get('status'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'account_sid' : payload.get('account_sid'),
            'enable_turn' : payload.get('enable_turn'),
            'unique_name' : payload.get('unique_name'),
            'status_callback' : payload.get('status_callback'),
            'status_callback_method' : payload.get('status_callback_method'),
            'end_time' : payload.get('end_time'),
            'duration' : payload.get('duration'),
            'type' : payload.get('type'),
            'max_participants' : payload.get('max_participants'),
            'max_participant_duration' : payload.get('max_participant_duration'),
            'max_concurrent_published_tracks' : payload.get('max_concurrent_published_tracks'),
            'record_participants_on_connect' : payload.get('record_participants_on_connect'),
            'video_codecs' : payload.get('video_codecs'),
            'media_region' : payload.get('media_region'),
            'audio_only' : payload.get('audio_only'),
            'empty_room_timeout' : payload.get('empty_room_timeout'),
            'unused_room_timeout' : payload.get('unused_room_timeout'),
            'large_room' : payload.get('large_room'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = RoomContext(
                self._version,
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def participants(self):
        return self._proxy.participants
    @property
    def recording_rules(self):
        return self._proxy.recording_rules
    @property
    def recordings(self):
        return self._proxy.recordings
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.RoomInstance {}>'.format(context)



class RoomListInstance(ListResource):
    def __init__(self, version: Version):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Rooms'
        
    
    """
    def create(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.create(method='post', uri=self._uri, data=data, )

        return RoomInstance(self._version, payload, )
        
    """
    
    """
    def page(self, status, unique_name, date_created_after, date_created_before, page_size):
        
        data = values.of({
            'status': status,'unique_name': unique_name,'date_created_after': date_created_after,'date_created_before': date_created_before,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return RoomPage(self._version, payload, )
    """
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.RoomListInstance>'

