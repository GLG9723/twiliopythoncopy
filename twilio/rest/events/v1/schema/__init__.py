r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Events
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from typing import Dict, Optional
from twilio.base import deserialize
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.events.v1.schema.schema_version import SchemaVersionList


class SchemaInstance(InstanceResource):
    def __init__(self, version, payload, id: Optional[str] = None):
        """
        Initialize the SchemaInstance
        """
        super().__init__(version)

        self._id: Optional[str] = payload.get("id")
        self._url: Optional[str] = payload.get("url")
        self._links: Optional[Dict[str, object]] = payload.get("links")
        self._latest_version_date_created: Optional[
            datetime
        ] = deserialize.iso8601_datetime(payload.get("latest_version_date_created"))
        self._latest_version: Optional[int] = deserialize.integer(
            payload.get("latest_version")
        )

        self._solution = {
            "id": id or self._id,
        }
        self._context: Optional[SchemaContext] = None

    @property
    def _proxy(self) -> "SchemaContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: SchemaContext for this SchemaInstance
        """
        if self._context is None:
            self._context = SchemaContext(
                self._version,
                id=self._solution["id"],
            )
        return self._context

    @property
    def id(self) -> Optional[str]:
        """
        :returns: The unique identifier of the schema. Each schema can have multiple versions, that share the same id.
        """
        return self._id

    @property
    def url(self) -> Optional[str]:
        """
        :returns: The URL of this resource.
        """
        return self._url

    @property
    def links(self) -> Optional[Dict[str, object]]:
        """
        :returns: Contains a dictionary of URL links to nested resources of this schema.
        """
        return self._links

    @property
    def latest_version_date_created(self) -> Optional[datetime]:
        """
        :returns: The date that the latest schema version was created, given in ISO 8601 format.
        """
        return self._latest_version_date_created

    @property
    def latest_version(self) -> Optional[int]:
        """
        :returns: The latest version published of this schema.
        """
        return self._latest_version

    def fetch(self) -> "SchemaInstance":
        """
        Fetch the SchemaInstance


        :returns: The fetched SchemaInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "SchemaInstance":
        """
        Asynchronous coroutine to fetch the SchemaInstance


        :returns: The fetched SchemaInstance
        """
        return await self._proxy.fetch_async()

    @property
    def versions(self) -> SchemaVersionList:
        """
        Access the versions
        """
        return self._proxy.versions

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Events.V1.SchemaInstance {}>".format(context)


class SchemaContext(InstanceContext):
    def __init__(self, version: Version, id: str):
        """
        Initialize the SchemaContext

        :param version: Version that contains the resource
        :param id: The unique identifier of the schema. Each schema can have multiple versions, that share the same id.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "id": id,
        }
        self._uri = "/Schemas/{id}".format(**self._solution)

        self._versions: Optional[SchemaVersionList] = None

    def fetch(self) -> SchemaInstance:
        """
        Fetch the SchemaInstance


        :returns: The fetched SchemaInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return SchemaInstance(
            self._version,
            payload,
            id=self._solution["id"],
        )

    async def fetch_async(self) -> SchemaInstance:
        """
        Asynchronous coroutine to fetch the SchemaInstance


        :returns: The fetched SchemaInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return SchemaInstance(
            self._version,
            payload,
            id=self._solution["id"],
        )

    @property
    def versions(self) -> SchemaVersionList:
        """
        Access the versions
        """
        if self._versions is None:
            self._versions = SchemaVersionList(
                self._version,
                self._solution["id"],
            )
        return self._versions

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Events.V1.SchemaContext {}>".format(context)


class SchemaList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the SchemaList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self, id) -> SchemaContext:
        """
        Constructs a SchemaContext

        :param id: The unique identifier of the schema. Each schema can have multiple versions, that share the same id.
        """
        return SchemaContext(self._version, id=id)

    def __call__(self, id) -> SchemaContext:
        """
        Constructs a SchemaContext

        :param id: The unique identifier of the schema. Each schema can have multiple versions, that share the same id.
        """
        return SchemaContext(self._version, id=id)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Events.V1.SchemaList>"
