"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Events
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.events.v1.schema.schema_version import SchemaVersionList


class SchemaList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the SchemaList

        :param Version version: Version that contains the resource
        
        :returns: twilio.rest.events.v1.schema.SchemaList
        :rtype: twilio.rest.events.v1.schema.SchemaList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        
        
        
    

    def get(self, id):
        """
        Constructs a SchemaContext
        
        :param id: The unique identifier of the schema. Each schema can have multiple versions, that share the same id.
        
        :returns: twilio.rest.events.v1.schema.SchemaContext
        :rtype: twilio.rest.events.v1.schema.SchemaContext
        """
        return SchemaContext(self._version, id=id)

    def __call__(self, id):
        """
        Constructs a SchemaContext
        
        :param id: The unique identifier of the schema. Each schema can have multiple versions, that share the same id.
        
        :returns: twilio.rest.events.v1.schema.SchemaContext
        :rtype: twilio.rest.events.v1.schema.SchemaContext
        """
        return SchemaContext(self._version, id=id)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Events.V1.SchemaList>'


class SchemaContext(InstanceContext):
    def __init__(self, version: Version, id: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'id': id,  }
        self._uri = '/Schemas/${id}'
        
        self._versions = None
    
    def fetch(self):
        
        """
        Fetch the SchemaInstance

        :returns: The fetched SchemaInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return SchemaInstance(self._version, payload, id=self._solution['id'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Events.V1.SchemaContext>'



class SchemaInstance(InstanceResource):
    def __init__(self, version, payload, id: str):
        super().__init__(version)
        self._properties = { 
            'id' : payload.get('id'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
            'latest_version_date_created' : payload.get('latest_version_date_created'),
            'latest_version' : payload.get('latest_version'),
        }

        self._context = None
        self._solution = {
            'id': id or self._properties['id'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = SchemaContext(
                self._version,
                id=self._solution['id'],
            )
        return self._context

    @property
    def versions(self):
        return self._proxy.versions
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Events.V1.SchemaInstance {}>'.format(context)



