"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Studio
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# from twilio.rest.engagement.engagement_context import EngagementContextListInstancefrom twilio.rest.engagement.step import StepListInstance


class EngagementContext(InstanceContext):
    def __init__(self, version: Version, flow_sid: str, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'flow_sid': flow_sid, 'sid': sid,  }
        self._uri = '/Flows/${flow_sid}/Engagements/${sid}'
        
        self._engagement_context = None
        self._steps = None
    
    def delete(self):
        
        

        """
        Deletes the EngagementInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )
    
    def fetch(self):
        
        """
        Fetch the EngagementInstance

        :returns: The fetched EngagementInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return EngagementInstance(self._version, payload, flow_sid=self._solution['flow_sid'], sid=self._solution['sid'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.EngagementContext>'



class EngagementInstance(InstanceResource):
    def __init__(self, version, payload, flow_sid: str, sid: str):
        super().__init__(version)
        self._properties = { 
            'sid' : payload.get('sid'),
            'account_sid' : payload.get('account_sid'),
            'flow_sid' : payload.get('flow_sid'),
            'contact_sid' : payload.get('contact_sid'),
            'contact_channel_address' : payload.get('contact_channel_address'),
            'context' : payload.get('context'),
            'status' : payload.get('status'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'flow_sid': flow_sid or self._properties['flow_sid'],'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = EngagementContext(
                self._version,
                flow_sid=self._solution['flow_sid'],sid=self._solution['sid'],
            )
        return self._context

    @property
    def engagement_context(self):
        return self._proxy.engagement_context
    @property
    def steps(self):
        return self._proxy.steps
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.EngagementInstance {}>'.format(context)



class EngagementListInstance(ListResource):
    def __init__(self, version: Version, flow_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'flow_sid': flow_sid,  }
        self._uri = '/Flows/${flow_sid}/Engagements'
        
    
    """
    def create(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.create(method='post', uri=self._uri, data=data, )

        return EngagementInstance(self._version, payload, flow_sid=self._solution['flow_sid'])
        
    """
    
    """
    def page(self, page_size):
        
        data = values.of({
            'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return EngagementPage(self._version, payload, flow_sid=self._solution['flow_sid'], )
    """
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.EngagementListInstance>'

