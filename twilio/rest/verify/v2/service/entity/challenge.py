"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Verify
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# from twilio.rest.challenge.notification import NotificationListInstance


class ChallengeContext(InstanceContext):
    def __init__(self, version: Version, service_sid: str, identity: str, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'service_sid': service_sid, 'identity': identity, 'sid': sid,  }
        self._uri = '/Services/${service_sid}/Entities/${identity}/Challenges/${sid}'
        
        self._notifications = None
    
    def fetch(self):
        
        """
        Fetch the ChallengeInstance

        :returns: The fetched ChallengeInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ChallengeInstance(self._version, payload, service_sid=self._solution['service_sid'], identity=self._solution['identity'], sid=self._solution['sid'], )
        

        
    
    def update(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return ChallengeInstance(self._version, payload, service_sid=self._solution['service_sid'], identity=self._solution['identity'], sid=self._solution['sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2.ChallengeContext>'



class ChallengeInstance(InstanceResource):
    def __init__(self, version, payload, service_sid: str, identity: str, sid: str):
        super().__init__(version)
        self._properties = { 
            'sid' : payload.get('sid'),
            'account_sid' : payload.get('account_sid'),
            'service_sid' : payload.get('service_sid'),
            'entity_sid' : payload.get('entity_sid'),
            'identity' : payload.get('identity'),
            'factor_sid' : payload.get('factor_sid'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'date_responded' : payload.get('date_responded'),
            'expiration_date' : payload.get('expiration_date'),
            'status' : payload.get('status'),
            'responded_reason' : payload.get('responded_reason'),
            'details' : payload.get('details'),
            'hidden_details' : payload.get('hidden_details'),
            'metadata' : payload.get('metadata'),
            'factor_type' : payload.get('factor_type'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'service_sid': service_sid or self._properties['service_sid'],'identity': identity or self._properties['identity'],'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = ChallengeContext(
                self._version,
                service_sid=self._solution['service_sid'],identity=self._solution['identity'],sid=self._solution['sid'],
            )
        return self._context

    @property
    def notifications(self):
        return self._proxy.notifications
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V2.ChallengeInstance {}>'.format(context)



class ChallengeListInstance(ListResource):
    def __init__(self, version: Version, service_sid: str, identity: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'service_sid': service_sid, 'identity': identity,  }
        self._uri = '/Services/${service_sid}/Entities/${identity}/Challenges'
        
    
    """
    def create(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.create(method='post', uri=self._uri, data=data, )

        return ChallengeInstance(self._version, payload, service_sid=self._solution['service_sid']identity=self._solution['identity'])
        
    """
    
    """
    def page(self, factor_sid, status, order, page_size):
        
        data = values.of({
            'factor_sid': factor_sid,'status': status,'order': order,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return ChallengePage(self._version, payload, service_sid=self._solution['service_sid'], identity=self._solution['identity'], )
    """
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2.ChallengeListInstance>'

