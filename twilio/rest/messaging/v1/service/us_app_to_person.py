r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from typing import Dict, List, Optional
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


class UsAppToPersonInstance(InstanceResource):
    def __init__(
        self, version, payload, messaging_service_sid: str, sid: Optional[str] = None
    ):
        """
        Initialize the UsAppToPersonInstance
        """
        super().__init__(version)

        self._sid: Optional[str] = payload.get("sid")
        self._account_sid: Optional[str] = payload.get("account_sid")
        self._brand_registration_sid: Optional[str] = payload.get(
            "brand_registration_sid"
        )
        self._messaging_service_sid: Optional[str] = payload.get(
            "messaging_service_sid"
        )
        self._description: Optional[str] = payload.get("description")
        self._message_samples: Optional[List[str]] = payload.get("message_samples")
        self._us_app_to_person_usecase: Optional[str] = payload.get(
            "us_app_to_person_usecase"
        )
        self._has_embedded_links: Optional[bool] = payload.get("has_embedded_links")
        self._has_embedded_phone: Optional[bool] = payload.get("has_embedded_phone")
        self._campaign_status: Optional[str] = payload.get("campaign_status")
        self._campaign_id: Optional[str] = payload.get("campaign_id")
        self._is_externally_registered: Optional[bool] = payload.get(
            "is_externally_registered"
        )
        self._rate_limits: Optional[Dict[str, object]] = payload.get("rate_limits")
        self._message_flow: Optional[str] = payload.get("message_flow")
        self._opt_in_message: Optional[str] = payload.get("opt_in_message")
        self._opt_out_message: Optional[str] = payload.get("opt_out_message")
        self._help_message: Optional[str] = payload.get("help_message")
        self._opt_in_keywords: Optional[List[str]] = payload.get("opt_in_keywords")
        self._opt_out_keywords: Optional[List[str]] = payload.get("opt_out_keywords")
        self._help_keywords: Optional[List[str]] = payload.get("help_keywords")
        self._date_created: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_created")
        )
        self._date_updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_updated")
        )
        self._url: Optional[str] = payload.get("url")
        self._mock: Optional[bool] = payload.get("mock")

        self._solution = {
            "messaging_service_sid": messaging_service_sid,
            "sid": sid or self._sid,
        }
        self._context: Optional[UsAppToPersonContext] = None

    @property
    def _proxy(self) -> "UsAppToPersonContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: UsAppToPersonContext for this UsAppToPersonInstance
        """
        if self._context is None:
            self._context = UsAppToPersonContext(
                self._version,
                messaging_service_sid=self._solution["messaging_service_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def sid(self) -> Optional[str]:
        """
        :returns: The unique string that identifies a US A2P Compliance resource `QE2c6890da8086d771620e9b13fadeba0b`.
        """
        return self._sid

    @property
    def account_sid(self) -> Optional[str]:
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Campaign belongs to.
        """
        return self._account_sid

    @property
    def brand_registration_sid(self) -> Optional[str]:
        """
        :returns: The unique string to identify the A2P brand.
        """
        return self._brand_registration_sid

    @property
    def messaging_service_sid(self) -> Optional[str]:
        """
        :returns: The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) that the resource is associated with.
        """
        return self._messaging_service_sid

    @property
    def description(self) -> Optional[str]:
        """
        :returns: A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.
        """
        return self._description

    @property
    def message_samples(self) -> Optional[List[str]]:
        """
        :returns: Message samples, at least 1 and up to 5 sample messages (at least 2 for starter/sole proprietor), >=20 chars, <=1024 chars each.
        """
        return self._message_samples

    @property
    def us_app_to_person_usecase(self) -> Optional[str]:
        """
        :returns: A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING, STARTER...]. STARTER campaign use cases can only be created by STARTER Brands, and there can only be one STARTER campaign created per STARTER Brand.
        """
        return self._us_app_to_person_usecase

    @property
    def has_embedded_links(self) -> Optional[bool]:
        """
        :returns: Indicate that this SMS campaign will send messages that contain links.
        """
        return self._has_embedded_links

    @property
    def has_embedded_phone(self) -> Optional[bool]:
        """
        :returns: Indicates that this SMS campaign will send messages that contain phone numbers.
        """
        return self._has_embedded_phone

    @property
    def campaign_status(self) -> Optional[str]:
        """
        :returns: Campaign status. Examples: IN_PROGRESS, VERIFIED, FAILED.
        """
        return self._campaign_status

    @property
    def campaign_id(self) -> Optional[str]:
        """
        :returns: The Campaign Registry (TCR) Campaign ID.
        """
        return self._campaign_id

    @property
    def is_externally_registered(self) -> Optional[bool]:
        """
        :returns: Indicates whether the campaign was registered externally or not.
        """
        return self._is_externally_registered

    @property
    def rate_limits(self) -> Optional[Dict[str, object]]:
        """
        :returns: Rate limit and/or classification set by each carrier, Ex. AT&T or T-Mobile.
        """
        return self._rate_limits

    @property
    def message_flow(self) -> Optional[str]:
        """
        :returns: Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.
        """
        return self._message_flow

    @property
    def opt_in_message(self) -> Optional[str]:
        """
        :returns: If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.
        """
        return self._opt_in_message

    @property
    def opt_out_message(self) -> Optional[str]:
        """
        :returns: Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
        """
        return self._opt_out_message

    @property
    def help_message(self) -> Optional[str]:
        """
        :returns: When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
        """
        return self._help_message

    @property
    def opt_in_keywords(self) -> Optional[List[str]]:
        """
        :returns: If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.
        """
        return self._opt_in_keywords

    @property
    def opt_out_keywords(self) -> Optional[List[str]]:
        """
        :returns: End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.
        """
        return self._opt_out_keywords

    @property
    def help_keywords(self) -> Optional[List[str]]:
        """
        :returns: End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.
        """
        return self._help_keywords

    @property
    def date_created(self) -> Optional[datetime]:
        """
        :returns: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        """
        return self._date_created

    @property
    def date_updated(self) -> Optional[datetime]:
        """
        :returns: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        """
        return self._date_updated

    @property
    def url(self) -> Optional[str]:
        """
        :returns: The absolute URL of the US App to Person resource.
        """
        return self._url

    @property
    def mock(self) -> Optional[bool]:
        """
        :returns: A boolean that specifies whether campaign is a mock or not. Mock campaigns will be automatically created if using a mock brand. Mock campaigns should only be used for testing purposes.
        """
        return self._mock

    def delete(self) -> bool:
        """
        Deletes the UsAppToPersonInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete()

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the UsAppToPersonInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async()

    def fetch(self) -> "UsAppToPersonInstance":
        """
        Fetch the UsAppToPersonInstance


        :returns: The fetched UsAppToPersonInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "UsAppToPersonInstance":
        """
        Asynchronous coroutine to fetch the UsAppToPersonInstance


        :returns: The fetched UsAppToPersonInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.UsAppToPersonInstance {}>".format(context)


class UsAppToPersonContext(InstanceContext):
    def __init__(self, version: Version, messaging_service_sid: str, sid: str):
        """
        Initialize the UsAppToPersonContext

        :param version: Version that contains the resource
        :param messaging_service_sid: The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to fetch the resource from.
        :param sid: The SID of the US A2P Compliance resource to fetch `QE2c6890da8086d771620e9b13fadeba0b`.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "messaging_service_sid": messaging_service_sid,
            "sid": sid,
        }
        self._uri = "/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}".format(
            **self._solution
        )

    def delete(self) -> bool:
        """
        Deletes the UsAppToPersonInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the UsAppToPersonInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def fetch(self) -> UsAppToPersonInstance:
        """
        Fetch the UsAppToPersonInstance


        :returns: The fetched UsAppToPersonInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return UsAppToPersonInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> UsAppToPersonInstance:
        """
        Asynchronous coroutine to fetch the UsAppToPersonInstance


        :returns: The fetched UsAppToPersonInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return UsAppToPersonInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.UsAppToPersonContext {}>".format(context)


class UsAppToPersonPage(Page):
    def get_instance(self, payload) -> UsAppToPersonInstance:
        """
        Build an instance of UsAppToPersonInstance

        :param dict payload: Payload response from the API
        """
        return UsAppToPersonInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Messaging.V1.UsAppToPersonPage>"


class UsAppToPersonList(ListResource):
    def __init__(self, version: Version, messaging_service_sid: str):
        """
        Initialize the UsAppToPersonList

        :param version: Version that contains the resource
        :param messaging_service_sid: The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to fetch the resource from.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "messaging_service_sid": messaging_service_sid,
        }
        self._uri = "/Services/{messaging_service_sid}/Compliance/Usa2p".format(
            **self._solution
        )

    def create(
        self,
        brand_registration_sid,
        description,
        message_flow,
        message_samples,
        us_app_to_person_usecase,
        has_embedded_links,
        has_embedded_phone,
        opt_in_message=values.unset,
        opt_out_message=values.unset,
        help_message=values.unset,
        opt_in_keywords=values.unset,
        opt_out_keywords=values.unset,
        help_keywords=values.unset,
    ) -> UsAppToPersonInstance:
        """
        Create the UsAppToPersonInstance

        :param str brand_registration_sid: A2P Brand Registration SID
        :param str description: A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.
        :param str message_flow: Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.
        :param List[str] message_samples: Message samples, at least 1 and up to 5 sample messages (at least 2 for sole proprietor), >=20 chars, <=1024 chars each.
        :param str us_app_to_person_usecase: A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..]
        :param bool has_embedded_links: Indicates that this SMS campaign will send messages that contain links.
        :param bool has_embedded_phone: Indicates that this SMS campaign will send messages that contain phone numbers.
        :param str opt_in_message: If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.
        :param str opt_out_message: Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
        :param str help_message: When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
        :param List[str] opt_in_keywords: If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.
        :param List[str] opt_out_keywords: End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.
        :param List[str] help_keywords: End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.

        :returns: The created UsAppToPersonInstance
        """
        data = values.of(
            {
                "BrandRegistrationSid": brand_registration_sid,
                "Description": description,
                "MessageFlow": message_flow,
                "MessageSamples": serialize.map(message_samples, lambda e: e),
                "UsAppToPersonUsecase": us_app_to_person_usecase,
                "HasEmbeddedLinks": has_embedded_links,
                "HasEmbeddedPhone": has_embedded_phone,
                "OptInMessage": opt_in_message,
                "OptOutMessage": opt_out_message,
                "HelpMessage": help_message,
                "OptInKeywords": serialize.map(opt_in_keywords, lambda e: e),
                "OptOutKeywords": serialize.map(opt_out_keywords, lambda e: e),
                "HelpKeywords": serialize.map(help_keywords, lambda e: e),
            }
        )

        payload = self._version.create(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return UsAppToPersonInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    async def create_async(
        self,
        brand_registration_sid,
        description,
        message_flow,
        message_samples,
        us_app_to_person_usecase,
        has_embedded_links,
        has_embedded_phone,
        opt_in_message=values.unset,
        opt_out_message=values.unset,
        help_message=values.unset,
        opt_in_keywords=values.unset,
        opt_out_keywords=values.unset,
        help_keywords=values.unset,
    ) -> UsAppToPersonInstance:
        """
        Asynchronously create the UsAppToPersonInstance

        :param str brand_registration_sid: A2P Brand Registration SID
        :param str description: A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.
        :param str message_flow: Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.
        :param List[str] message_samples: Message samples, at least 1 and up to 5 sample messages (at least 2 for sole proprietor), >=20 chars, <=1024 chars each.
        :param str us_app_to_person_usecase: A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..]
        :param bool has_embedded_links: Indicates that this SMS campaign will send messages that contain links.
        :param bool has_embedded_phone: Indicates that this SMS campaign will send messages that contain phone numbers.
        :param str opt_in_message: If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.
        :param str opt_out_message: Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
        :param str help_message: When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
        :param List[str] opt_in_keywords: If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.
        :param List[str] opt_out_keywords: End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.
        :param List[str] help_keywords: End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.

        :returns: The created UsAppToPersonInstance
        """
        data = values.of(
            {
                "BrandRegistrationSid": brand_registration_sid,
                "Description": description,
                "MessageFlow": message_flow,
                "MessageSamples": serialize.map(message_samples, lambda e: e),
                "UsAppToPersonUsecase": us_app_to_person_usecase,
                "HasEmbeddedLinks": has_embedded_links,
                "HasEmbeddedPhone": has_embedded_phone,
                "OptInMessage": opt_in_message,
                "OptOutMessage": opt_out_message,
                "HelpMessage": help_message,
                "OptInKeywords": serialize.map(opt_in_keywords, lambda e: e),
                "OptOutKeywords": serialize.map(opt_out_keywords, lambda e: e),
                "HelpKeywords": serialize.map(help_keywords, lambda e: e),
            }
        )

        payload = await self._version.create_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return UsAppToPersonInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    def stream(self, limit=None, page_size=None) -> List[UsAppToPersonInstance]:
        """
        Streams UsAppToPersonInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(page_size=limits["page_size"])

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self, limit=None, page_size=None
    ) -> List[UsAppToPersonInstance]:
        """
        Asynchronously streams UsAppToPersonInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(page_size=limits["page_size"])

        return await self._version.stream_async(page, limits["limit"])

    def list(self, limit=None, page_size=None) -> List[UsAppToPersonInstance]:
        """
        Lists UsAppToPersonInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        return list(
            self.stream(
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self, limit=None, page_size=None
    ) -> List[UsAppToPersonInstance]:
        """
        Asynchronously lists UsAppToPersonInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        return list(
            await self.stream_async(
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self, page_token=values.unset, page_number=values.unset, page_size=values.unset
    ) -> UsAppToPersonPage:
        """
        Retrieve a single page of UsAppToPersonInstance records from the API.
        Request is executed immediately

        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of UsAppToPersonInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return UsAppToPersonPage(self._version, response, self._solution)

    async def page_async(
        self, page_token=values.unset, page_number=values.unset, page_size=values.unset
    ) -> UsAppToPersonPage:
        """
        Asynchronously retrieve a single page of UsAppToPersonInstance records from the API.
        Request is executed immediately

        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of UsAppToPersonInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return UsAppToPersonPage(self._version, response, self._solution)

    def get_page(self, target_url) -> UsAppToPersonPage:
        """
        Retrieve a specific page of UsAppToPersonInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of UsAppToPersonInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return UsAppToPersonPage(self._version, response, self._solution)

    async def get_page_async(self, target_url) -> UsAppToPersonPage:
        """
        Asynchronously retrieve a specific page of UsAppToPersonInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of UsAppToPersonInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return UsAppToPersonPage(self._version, response, self._solution)

    def get(self, sid) -> UsAppToPersonContext:
        """
        Constructs a UsAppToPersonContext

        :param sid: The SID of the US A2P Compliance resource to fetch `QE2c6890da8086d771620e9b13fadeba0b`.
        """
        return UsAppToPersonContext(
            self._version,
            messaging_service_sid=self._solution["messaging_service_sid"],
            sid=sid,
        )

    def __call__(self, sid) -> UsAppToPersonContext:
        """
        Constructs a UsAppToPersonContext

        :param sid: The SID of the US A2P Compliance resource to fetch `QE2c6890da8086d771620e9b13fadeba0b`.
        """
        return UsAppToPersonContext(
            self._version,
            messaging_service_sid=self._solution["messaging_service_sid"],
            sid=sid,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Messaging.V1.UsAppToPersonList>"
