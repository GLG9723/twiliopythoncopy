r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from typing import Dict, List, Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class CallSummaryInstance(InstanceResource):
    class AnsweredBy(object):
        UNKNOWN = "unknown"
        MACHINE_START = "machine_start"
        MACHINE_END_BEEP = "machine_end_beep"
        MACHINE_END_SILENCE = "machine_end_silence"
        MACHINE_END_OTHER = "machine_end_other"
        HUMAN = "human"
        FAX = "fax"

    class CallState(object):
        RINGING = "ringing"
        COMPLETED = "completed"
        BUSY = "busy"
        FAIL = "fail"
        NOANSWER = "noanswer"
        CANCELED = "canceled"
        ANSWERED = "answered"
        UNDIALED = "undialed"

    class CallType(object):
        CARRIER = "carrier"
        SIP = "sip"
        TRUNKING = "trunking"
        CLIENT = "client"

    class ProcessingState(object):
        COMPLETE = "complete"
        PARTIAL = "partial"

    def __init__(self, version, payload, call_sid: str):
        """
        Initialize the CallSummaryInstance
        """
        super().__init__(version)

        self._account_sid: Optional[str] = payload.get("account_sid")
        self._call_sid: Optional[str] = payload.get("call_sid")
        self._call_type: Optional["CallSummaryInstance.CallType"] = payload.get(
            "call_type"
        )
        self._call_state: Optional["CallSummaryInstance.CallState"] = payload.get(
            "call_state"
        )
        self._answered_by: Optional["CallSummaryInstance.AnsweredBy"] = payload.get(
            "answered_by"
        )
        self._processing_state: Optional[
            "CallSummaryInstance.ProcessingState"
        ] = payload.get("processing_state")
        self._created_time: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("created_time")
        )
        self._start_time: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("start_time")
        )
        self._end_time: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("end_time")
        )
        self._duration: Optional[int] = deserialize.integer(payload.get("duration"))
        self._connect_duration: Optional[int] = deserialize.integer(
            payload.get("connect_duration")
        )
        self.__from: Optional[Dict[str, object]] = payload.get("from")
        self._to: Optional[Dict[str, object]] = payload.get("to")
        self._carrier_edge: Optional[Dict[str, object]] = payload.get("carrier_edge")
        self._client_edge: Optional[Dict[str, object]] = payload.get("client_edge")
        self._sdk_edge: Optional[Dict[str, object]] = payload.get("sdk_edge")
        self._sip_edge: Optional[Dict[str, object]] = payload.get("sip_edge")
        self._tags: Optional[List[str]] = payload.get("tags")
        self._url: Optional[str] = payload.get("url")
        self._attributes: Optional[Dict[str, object]] = payload.get("attributes")
        self._properties: Optional[Dict[str, object]] = payload.get("properties")
        self._trust: Optional[Dict[str, object]] = payload.get("trust")
        self._annotation: Optional[Dict[str, object]] = payload.get("annotation")

        self._solution = {
            "call_sid": call_sid,
        }
        self._context: Optional[CallSummaryContext] = None

    @property
    def _proxy(self) -> "CallSummaryContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: CallSummaryContext for this CallSummaryInstance
        """
        if self._context is None:
            self._context = CallSummaryContext(
                self._version,
                call_sid=self._solution["call_sid"],
            )
        return self._context

    @property
    def account_sid(self) -> Optional[str]:
        return self._account_sid

    @property
    def call_sid(self) -> Optional[str]:
        return self._call_sid

    @property
    def call_type(self) -> Optional["CallSummaryInstance.CallType"]:
        return self._call_type

    @property
    def call_state(self) -> Optional["CallSummaryInstance.CallState"]:
        return self._call_state

    @property
    def answered_by(self) -> Optional["CallSummaryInstance.AnsweredBy"]:
        return self._answered_by

    @property
    def processing_state(self) -> Optional["CallSummaryInstance.ProcessingState"]:
        return self._processing_state

    @property
    def created_time(self) -> Optional[datetime]:
        return self._created_time

    @property
    def start_time(self) -> Optional[datetime]:
        return self._start_time

    @property
    def end_time(self) -> Optional[datetime]:
        return self._end_time

    @property
    def duration(self) -> Optional[int]:
        return self._duration

    @property
    def connect_duration(self) -> Optional[int]:
        return self._connect_duration

    @property
    def _from(self) -> Optional[Dict[str, object]]:
        return self.__from

    @property
    def to(self) -> Optional[Dict[str, object]]:
        return self._to

    @property
    def carrier_edge(self) -> Optional[Dict[str, object]]:
        return self._carrier_edge

    @property
    def client_edge(self) -> Optional[Dict[str, object]]:
        return self._client_edge

    @property
    def sdk_edge(self) -> Optional[Dict[str, object]]:
        return self._sdk_edge

    @property
    def sip_edge(self) -> Optional[Dict[str, object]]:
        return self._sip_edge

    @property
    def tags(self) -> Optional[List[str]]:
        return self._tags

    @property
    def url(self) -> Optional[str]:
        return self._url

    @property
    def attributes(self) -> Optional[Dict[str, object]]:
        return self._attributes

    @property
    def properties(self) -> Optional[Dict[str, object]]:
        return self._properties

    @property
    def trust(self) -> Optional[Dict[str, object]]:
        return self._trust

    @property
    def annotation(self) -> Optional[Dict[str, object]]:
        return self._annotation

    def fetch(self, processing_state=values.unset) -> "CallSummaryInstance":
        """
        Fetch the CallSummaryInstance

        :param "CallSummaryInstance.ProcessingState" processing_state:

        :returns: The fetched CallSummaryInstance
        """
        return self._proxy.fetch(
            processing_state=processing_state,
        )

    async def fetch_async(self, processing_state=values.unset) -> "CallSummaryInstance":
        """
        Asynchronous coroutine to fetch the CallSummaryInstance

        :param "CallSummaryInstance.ProcessingState" processing_state:

        :returns: The fetched CallSummaryInstance
        """
        return await self._proxy.fetch_async(
            processing_state=processing_state,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.CallSummaryInstance {}>".format(context)


class CallSummaryContext(InstanceContext):
    def __init__(self, version: Version, call_sid: str):
        """
        Initialize the CallSummaryContext

        :param version: Version that contains the resource
        :param call_sid:
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "call_sid": call_sid,
        }
        self._uri = "/Voice/{call_sid}/Summary".format(**self._solution)

    def fetch(self, processing_state=values.unset) -> CallSummaryInstance:
        """
        Fetch the CallSummaryInstance

        :param "CallSummaryInstance.ProcessingState" processing_state:

        :returns: The fetched CallSummaryInstance
        """

        data = values.of(
            {
                "ProcessingState": processing_state,
            }
        )

        payload = self._version.fetch(method="GET", uri=self._uri, params=data)

        return CallSummaryInstance(
            self._version,
            payload,
            call_sid=self._solution["call_sid"],
        )

    async def fetch_async(self, processing_state=values.unset) -> CallSummaryInstance:
        """
        Asynchronous coroutine to fetch the CallSummaryInstance

        :param "CallSummaryInstance.ProcessingState" processing_state:

        :returns: The fetched CallSummaryInstance
        """

        data = values.of(
            {
                "ProcessingState": processing_state,
            }
        )

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, params=data
        )

        return CallSummaryInstance(
            self._version,
            payload,
            call_sid=self._solution["call_sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.CallSummaryContext {}>".format(context)


class CallSummaryList(ListResource):
    def __init__(self, version: Version, call_sid: str):
        """
        Initialize the CallSummaryList

        :param version: Version that contains the resource
        :param call_sid:

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "call_sid": call_sid,
        }

    def get(self) -> CallSummaryContext:
        """
        Constructs a CallSummaryContext

        """
        return CallSummaryContext(self._version, call_sid=self._solution["call_sid"])

    def __call__(self) -> CallSummaryContext:
        """
        Constructs a CallSummaryContext

        """
        return CallSummaryContext(self._version, call_sid=self._solution["call_sid"])

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Insights.V1.CallSummaryList>"
