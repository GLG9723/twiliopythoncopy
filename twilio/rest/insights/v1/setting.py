"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version



class SettingList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the SettingList

        :param Version version: Version that contains the resource
        
        :returns: twilio.rest.insights.v1.setting.SettingList
        :rtype: twilio.rest.insights.v1.setting.SettingList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        
        
        
    
    

    def get(self):
        """
        Constructs a SettingContext
        
        :returns: twilio.rest.insights.v1.setting.SettingContext
        :rtype: twilio.rest.insights.v1.setting.SettingContext
        """
        return SettingContext(self._version)

    def __call__(self):
        """
        Constructs a SettingContext
        
        :returns: twilio.rest.insights.v1.setting.SettingContext
        :rtype: twilio.rest.insights.v1.setting.SettingContext
        """
        return SettingContext(self._version)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.SettingList>'


class SettingContext(InstanceContext):
    def __init__(self, version: Version):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Voice/Settings'
        
    
    def fetch(self, subaccount_sid):
        
        """
        Fetch the SettingInstance

        :returns: The fetched SettingInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return SettingInstance(self._version, payload, )
        

        
    
    def update(self, advanced_features, voice_trace, subaccount_sid):
        data = values.of({
            'advanced_features': advanced_features,'voice_trace': voice_trace,'subaccount_sid': subaccount_sid,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return SettingInstance(self._version, payload, )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.SettingContext>'



class SettingInstance(InstanceResource):
    def __init__(self, version, payload):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'advanced_features' : payload.get('advanced_features'),
            'voice_trace' : payload.get('voice_trace'),
            'url' : payload.get('url'),
        }

        self._context = None
        self._solution = {
            
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = SettingContext(
                self._version,
                
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.SettingInstance {}>'.format(context)



