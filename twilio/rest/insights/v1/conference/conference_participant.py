"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


class ConferenceParticipantList(ListResource):

    def __init__(self, version: Version, conference_sid: str):
        """
        Initialize the ConferenceParticipantList

        :param Version version: Version that contains the resource
        :param conference_sid: The unique SID identifier of the Conference.
        
        :returns: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantList
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantList
        """
        super().__init__(version)

        # Path Solution
        self._solution = { 'conference_sid': conference_sid,  }
        self._uri = '/Conferences/${conference_sid}/Participants'.format(**self._solution)
        
        
    
    
    def stream(self, participant_sid=values.unset, label=values.unset, events=values.unset, limit=None, page_size=None):
        """
        Streams ConferenceParticipantInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param str participant_sid: The unique SID identifier of the Participant.
        :param str label: User-specified label for a participant.
        :param str events: Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            participant_sid=participant_sid,
            label=label,
            events=events,
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    def list(self, participant_sid=values.unset, label=values.unset, events=values.unset, limit=None, page_size=None):
        """
        Lists ConferenceParticipantInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param str participant_sid: The unique SID identifier of the Participant.
        :param str label: User-specified label for a participant.
        :param str events: Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantInstance]
        """
        return list(self.stream(
            participant_sid=participant_sid,
            label=label,
            events=events,
            limit=limit,
            page_size=page_size,
        ))

    def page(self, participant_sid=values.unset, label=values.unset, events=values.unset, page_token=values.unset, page_number=values.unset, page_size=values.unset):
        """
        Retrieve a single page of ConferenceParticipantInstance records from the API.
        Request is executed immediately
        
        :param str participant_sid: The unique SID identifier of the Participant.
        :param str label: User-specified label for a participant.
        :param str events: Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of ConferenceParticipantInstance
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantPage
        """
        data = values.of({ 
            'ParticipantSid': participant_sid,
            'Label': label,
            'Events': events,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data)
        return ConferenceParticipantPage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of ConferenceParticipantInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of ConferenceParticipantInstance
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url
        )
        return ConferenceParticipantPage(self._version, response, self._solution)


    def get(self, participant_sid):
        """
        Constructs a ConferenceParticipantContext
        
        :param participant_sid: The unique SID identifier of the Participant.
        
        :returns: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantContext
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantContext
        """
        return ConferenceParticipantContext(self._version, conference_sid=self._solution['conference_sid'], participant_sid=participant_sid)

    def __call__(self, participant_sid):
        """
        Constructs a ConferenceParticipantContext
        
        :param participant_sid: The unique SID identifier of the Participant.
        
        :returns: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantContext
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantContext
        """
        return ConferenceParticipantContext(self._version, conference_sid=self._solution['conference_sid'], participant_sid=participant_sid)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ConferenceParticipantList>'




class ConferenceParticipantPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the ConferenceParticipantPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantPage
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantPage
        """
        super().__init__(version, response)

        # Path solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ConferenceParticipantInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantInstance
        :rtype: twilio.rest.insights.v1.conference.conference_participant.ConferenceParticipantInstance
        """
        return ConferenceParticipantInstance(self._version, payload, conference_sid=self._solution['conference_sid'])

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ConferenceParticipantPage>'





class ConferenceParticipantContext(InstanceContext):
    def __init__(self, version: Version, conference_sid: str, participant_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'conference_sid': conference_sid, 'participant_sid': participant_sid,  }
        self._uri = '/Conferences/${conference_sid}/Participants/${participant_sid}'
        
    
    def fetch(self, events, metrics):
        
        """
        Fetch the ConferenceParticipantInstance

        :returns: The fetched ConferenceParticipantInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ConferenceParticipantInstance(self._version, payload, conference_sid=self._solution['conference_sid'], participant_sid=self._solution['participant_sid'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ConferenceParticipantContext>'



class ConferenceParticipantInstance(InstanceResource):
    def __init__(self, version, payload, conference_sid: str, participant_sid: str):
        super().__init__(version)
        self._properties = { 
            'participant_sid' : payload.get('participant_sid'),
            'label' : payload.get('label'),
            'conference_sid' : payload.get('conference_sid'),
            'call_sid' : payload.get('call_sid'),
            'account_sid' : payload.get('account_sid'),
            'call_direction' : payload.get('call_direction'),
            '_from' : payload.get('from'),
            'to' : payload.get('to'),
            'call_status' : payload.get('call_status'),
            'country_code' : payload.get('country_code'),
            'is_moderator' : payload.get('is_moderator'),
            'join_time' : payload.get('join_time'),
            'leave_time' : payload.get('leave_time'),
            'duration_seconds' : payload.get('duration_seconds'),
            'outbound_queue_length' : payload.get('outbound_queue_length'),
            'outbound_time_in_queue' : payload.get('outbound_time_in_queue'),
            'jitter_buffer_size' : payload.get('jitter_buffer_size'),
            'is_coach' : payload.get('is_coach'),
            'coached_participants' : payload.get('coached_participants'),
            'participant_region' : payload.get('participant_region'),
            'conference_region' : payload.get('conference_region'),
            'call_type' : payload.get('call_type'),
            'processing_state' : payload.get('processing_state'),
            'properties' : payload.get('properties'),
            'events' : payload.get('events'),
            'metrics' : payload.get('metrics'),
            'url' : payload.get('url'),
        }

        self._context = None
        self._solution = {
            'conference_sid': conference_sid or self._properties['conference_sid'],'participant_sid': participant_sid or self._properties['participant_sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = ConferenceParticipantContext(
                self._version,
                conference_sid=self._solution['conference_sid'],participant_sid=self._solution['participant_sid'],
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.ConferenceParticipantInstance {}>'.format(context)



