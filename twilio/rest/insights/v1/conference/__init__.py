"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.insights.v1.conference.conference_participant import ConferenceParticipantList


class ConferenceList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the ConferenceList

        :param Version version: Version that contains the resource
        
        :returns: twilio.rest.insights.v1.conference.ConferenceList
        :rtype: twilio.rest.insights.v1.conference.ConferenceList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Conferences'.format(**self._solution)
        
        
    
    
    def stream(self, conference_sid=values.unset, friendly_name=values.unset, status=values.unset, created_after=values.unset, created_before=values.unset, mixer_region=values.unset, tags=values.unset, subaccount=values.unset, detected_issues=values.unset, end_reason=values.unset, limit=None, page_size=None):
        """
        Streams ConferenceInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param str conference_sid: The SID of the conference.
        :param str friendly_name: Custom label for the conference resource, up to 64 characters.
        :param str status: Conference status.
        :param str created_after: Conferences created after the provided timestamp specified in ISO 8601 format
        :param str created_before: Conferences created before the provided timestamp specified in ISO 8601 format.
        :param str mixer_region: Twilio region where the conference media was mixed.
        :param str tags: Tags applied by Twilio for common potential configuration, quality, or performance issues.
        :param str subaccount: Account SID for the subaccount whose resources you wish to retrieve.
        :param str detected_issues: Potential configuration, behavior, or performance issues detected during the conference.
        :param str end_reason: Conference end reason; e.g. last participant left, modified by API, etc.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.insights.v1.conference.ConferenceInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            conference_sid=conference_sid,
            friendly_name=friendly_name,
            status=status,
            created_after=created_after,
            created_before=created_before,
            mixer_region=mixer_region,
            tags=tags,
            subaccount=subaccount,
            detected_issues=detected_issues,
            end_reason=end_reason,
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    def list(self, conference_sid=values.unset, friendly_name=values.unset, status=values.unset, created_after=values.unset, created_before=values.unset, mixer_region=values.unset, tags=values.unset, subaccount=values.unset, detected_issues=values.unset, end_reason=values.unset, limit=None, page_size=None):
        """
        Lists ConferenceInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param str conference_sid: The SID of the conference.
        :param str friendly_name: Custom label for the conference resource, up to 64 characters.
        :param str status: Conference status.
        :param str created_after: Conferences created after the provided timestamp specified in ISO 8601 format
        :param str created_before: Conferences created before the provided timestamp specified in ISO 8601 format.
        :param str mixer_region: Twilio region where the conference media was mixed.
        :param str tags: Tags applied by Twilio for common potential configuration, quality, or performance issues.
        :param str subaccount: Account SID for the subaccount whose resources you wish to retrieve.
        :param str detected_issues: Potential configuration, behavior, or performance issues detected during the conference.
        :param str end_reason: Conference end reason; e.g. last participant left, modified by API, etc.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.insights.v1.conference.ConferenceInstance]
        """
        return list(self.stream(
            conference_sid=conference_sid,
            friendly_name=friendly_name,
            status=status,
            created_after=created_after,
            created_before=created_before,
            mixer_region=mixer_region,
            tags=tags,
            subaccount=subaccount,
            detected_issues=detected_issues,
            end_reason=end_reason,
            limit=limit,
            page_size=page_size,
        ))

    def page(self, conference_sid=values.unset, friendly_name=values.unset, status=values.unset, created_after=values.unset, created_before=values.unset, mixer_region=values.unset, tags=values.unset, subaccount=values.unset, detected_issues=values.unset, end_reason=values.unset, page_token=values.unset, page_number=values.unset, page_size=values.unset):
        """
        Retrieve a single page of ConferenceInstance records from the API.
        Request is executed immediately
        
        :param str conference_sid: The SID of the conference.
        :param str friendly_name: Custom label for the conference resource, up to 64 characters.
        :param str status: Conference status.
        :param str created_after: Conferences created after the provided timestamp specified in ISO 8601 format
        :param str created_before: Conferences created before the provided timestamp specified in ISO 8601 format.
        :param str mixer_region: Twilio region where the conference media was mixed.
        :param str tags: Tags applied by Twilio for common potential configuration, quality, or performance issues.
        :param str subaccount: Account SID for the subaccount whose resources you wish to retrieve.
        :param str detected_issues: Potential configuration, behavior, or performance issues detected during the conference.
        :param str end_reason: Conference end reason; e.g. last participant left, modified by API, etc.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of ConferenceInstance
        :rtype: twilio.rest.insights.v1.conference.ConferencePage
        """
        data = values.of({ 
            'ConferenceSid': conference_sid,
            'FriendlyName': friendly_name,
            'Status': status,
            'CreatedAfter': created_after,
            'CreatedBefore': created_before,
            'MixerRegion': mixer_region,
            'Tags': tags,
            'Subaccount': subaccount,
            'DetectedIssues': detected_issues,
            'EndReason': end_reason,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data)
        return ConferencePage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of ConferenceInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of ConferenceInstance
        :rtype: twilio.rest.insights.v1.conference.ConferencePage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url
        )
        return ConferencePage(self._version, response, self._solution)


    def get(self, conference_sid):
        """
        Constructs a ConferenceContext
        
        :param conference_sid: The unique SID identifier of the Conference.
        
        :returns: twilio.rest.insights.v1.conference.ConferenceContext
        :rtype: twilio.rest.insights.v1.conference.ConferenceContext
        """
        return ConferenceContext(self._version, conference_sid=conference_sid)

    def __call__(self, conference_sid):
        """
        Constructs a ConferenceContext
        
        :param conference_sid: The unique SID identifier of the Conference.
        
        :returns: twilio.rest.insights.v1.conference.ConferenceContext
        :rtype: twilio.rest.insights.v1.conference.ConferenceContext
        """
        return ConferenceContext(self._version, conference_sid=conference_sid)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ConferenceList>'




class ConferencePage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the ConferencePage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.insights.v1.conference.ConferencePage
        :rtype: twilio.rest.insights.v1.conference.ConferencePage
        """
        super().__init__(version, response)

        # Path solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ConferenceInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.insights.v1.conference.ConferenceInstance
        :rtype: twilio.rest.insights.v1.conference.ConferenceInstance
        """
        return ConferenceInstance(self._version, payload)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ConferencePage>'





class ConferenceContext(InstanceContext):
    def __init__(self, version: Version, conference_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'conference_sid': conference_sid,  }
        self._uri = '/Conferences/${conference_sid}'
        
        self._conference_participants = None
    
    def fetch(self):
        
        """
        Fetch the ConferenceInstance

        :returns: The fetched ConferenceInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ConferenceInstance(self._version, payload, conference_sid=self._solution['conference_sid'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ConferenceContext>'



class ConferenceInstance(InstanceResource):
    def __init__(self, version, payload, conference_sid: str):
        super().__init__(version)
        self._properties = { 
            'conference_sid' : payload.get('conference_sid'),
            'account_sid' : payload.get('account_sid'),
            'friendly_name' : payload.get('friendly_name'),
            'create_time' : payload.get('create_time'),
            'start_time' : payload.get('start_time'),
            'end_time' : payload.get('end_time'),
            'duration_seconds' : payload.get('duration_seconds'),
            'connect_duration_seconds' : payload.get('connect_duration_seconds'),
            'status' : payload.get('status'),
            'max_participants' : payload.get('max_participants'),
            'max_concurrent_participants' : payload.get('max_concurrent_participants'),
            'unique_participants' : payload.get('unique_participants'),
            'end_reason' : payload.get('end_reason'),
            'ended_by' : payload.get('ended_by'),
            'mixer_region' : payload.get('mixer_region'),
            'mixer_region_requested' : payload.get('mixer_region_requested'),
            'recording_enabled' : payload.get('recording_enabled'),
            'detected_issues' : payload.get('detected_issues'),
            'tags' : payload.get('tags'),
            'tag_info' : payload.get('tag_info'),
            'processing_state' : payload.get('processing_state'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'conference_sid': conference_sid or self._properties['conference_sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = ConferenceContext(
                self._version,
                conference_sid=self._solution['conference_sid'],
            )
        return self._context

    @property
    def conference_participants(self):
        return self._proxy.conference_participants
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.ConferenceInstance {}>'.format(context)



