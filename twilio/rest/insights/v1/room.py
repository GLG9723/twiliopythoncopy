"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource

from twilio.base.page import Page

from twilio.rest.room.participant import ParticipantListInstance


class RoomContext(InstanceContext):
    def __init__(self, version: V1, room_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'room_sid': room_sid,  }
        self._uri = '/Video/Rooms/${room_sid}'
        
        self._participants = None
    
    def fetch(self):
        
        """
        Fetch the RoomInstance

        :returns: The fetched RoomInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )
        return RoomInstance(
            self._version,
            payload,
            room_sid=self._solution['room_sid'],
        )
        
        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.RoomContext>'



class RoomInstance(InstanceResource):
    def __init__(self, version, payload, room_sid: str):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'room_sid' : payload.get('room_sid'),
            'room_name' : payload.get('room_name'),
            'create_time' : payload.get('create_time'),
            'end_time' : payload.get('end_time'),
            'room_type' : payload.get('room_type'),
            'room_status' : payload.get('room_status'),
            'status_callback' : payload.get('status_callback'),
            'status_callback_method' : payload.get('status_callback_method'),
            'created_method' : payload.get('created_method'),
            'end_reason' : payload.get('end_reason'),
            'max_participants' : payload.get('max_participants'),
            'unique_participants' : payload.get('unique_participants'),
            'unique_participant_identities' : payload.get('unique_participant_identities'),
            'concurrent_participants' : payload.get('concurrent_participants'),
            'max_concurrent_participants' : payload.get('max_concurrent_participants'),
            'codecs' : payload.get('codecs'),
            'media_region' : payload.get('media_region'),
            'duration_sec' : payload.get('duration_sec'),
            'total_participant_duration_sec' : payload.get('total_participant_duration_sec'),
            'total_recording_duration_sec' : payload.get('total_recording_duration_sec'),
            'processing_state' : payload.get('processing_state'),
            'recording_enabled' : payload.get('recording_enabled'),
            'edge_location' : payload.get('edge_location'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'room_sid': room_sid or self._properties['room_sid']
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = RoomContext(
                self._version,
                room_sid=self._solution['room_sid'],
            )
        return self._context

    @property
    def participants(self):
        return self._proxy.participants
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.RoomInstance {}>'.format(context)



class RoomListInstance(ListResource):
    def __init__(self, version: V1):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Video/Rooms'
        
    
    def page(self, room_type, codec, room_name, created_after, created_before, page_size):
        
        data = values.of({
            'room_type': room_type,'codec': codec,'room_name': room_name,'created_after': created_after,'created_before': created_before,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return RoomPage(self._version, payload, )
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.RoomListInstance>'

