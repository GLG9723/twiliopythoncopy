r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Flex
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Dict, List, Optional
from twilio.base import serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


class InsightsSegmentsInstance(InstanceResource):
    def __init__(self, version, payload, segment_id: Optional[str] = None):
        """
        Initialize the InsightsSegmentsInstance
        """
        super().__init__(version)

        self._segment_id: Optional[str] = payload.get("segment_id")
        self._external_id: Optional[str] = payload.get("external_id")
        self._queue: Optional[str] = payload.get("queue")
        self._external_contact: Optional[str] = payload.get("external_contact")
        self._external_segment_link_id: Optional[str] = payload.get(
            "external_segment_link_id"
        )
        self._date: Optional[str] = payload.get("date")
        self._account_id: Optional[str] = payload.get("account_id")
        self._external_segment_link: Optional[str] = payload.get(
            "external_segment_link"
        )
        self._agent_id: Optional[str] = payload.get("agent_id")
        self._agent_phone: Optional[str] = payload.get("agent_phone")
        self._agent_name: Optional[str] = payload.get("agent_name")
        self._agent_team_name: Optional[str] = payload.get("agent_team_name")
        self._agent_team_name_in_hierarchy: Optional[str] = payload.get(
            "agent_team_name_in_hierarchy"
        )
        self._agent_link: Optional[str] = payload.get("agent_link")
        self._customer_phone: Optional[str] = payload.get("customer_phone")
        self._customer_name: Optional[str] = payload.get("customer_name")
        self._customer_link: Optional[str] = payload.get("customer_link")
        self._segment_recording_offset: Optional[str] = payload.get(
            "segment_recording_offset"
        )
        self._media: Optional[Dict[str, object]] = payload.get("media")
        self._assessment_type: Optional[Dict[str, object]] = payload.get(
            "assessment_type"
        )
        self._assessment_percentage: Optional[Dict[str, object]] = payload.get(
            "assessment_percentage"
        )
        self._url: Optional[str] = payload.get("url")

        self._solution = {
            "segment_id": segment_id or self._segment_id,
        }
        self._context: Optional[InsightsSegmentsContext] = None

    @property
    def _proxy(self) -> "InsightsSegmentsContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: InsightsSegmentsContext for this InsightsSegmentsInstance
        """
        if self._context is None:
            self._context = InsightsSegmentsContext(
                self._version,
                segment_id=self._solution["segment_id"],
            )
        return self._context

    @property
    def segment_id(self) -> Optional[str]:
        """
        :returns: To unique id of the segment
        """
        return self._segment_id

    @property
    def external_id(self) -> Optional[str]:
        """
        :returns: The unique id for the conversation.
        """
        return self._external_id

    @property
    def queue(self) -> Optional[str]:
        return self._queue

    @property
    def external_contact(self) -> Optional[str]:
        return self._external_contact

    @property
    def external_segment_link_id(self) -> Optional[str]:
        """
        :returns: The uuid for the external_segment_link.
        """
        return self._external_segment_link_id

    @property
    def date(self) -> Optional[str]:
        """
        :returns: The date of the conversation.
        """
        return self._date

    @property
    def account_id(self) -> Optional[str]:
        """
        :returns: The unique id for the account.
        """
        return self._account_id

    @property
    def external_segment_link(self) -> Optional[str]:
        """
        :returns: The hyperlink to recording of the task event.
        """
        return self._external_segment_link

    @property
    def agent_id(self) -> Optional[str]:
        """
        :returns: The unique id for the agent.
        """
        return self._agent_id

    @property
    def agent_phone(self) -> Optional[str]:
        """
        :returns: The phone number of the agent.
        """
        return self._agent_phone

    @property
    def agent_name(self) -> Optional[str]:
        """
        :returns: The name of the agent.
        """
        return self._agent_name

    @property
    def agent_team_name(self) -> Optional[str]:
        """
        :returns: The team name to which agent belongs.
        """
        return self._agent_team_name

    @property
    def agent_team_name_in_hierarchy(self) -> Optional[str]:
        """
        :returns: he team name to which agent belongs.
        """
        return self._agent_team_name_in_hierarchy

    @property
    def agent_link(self) -> Optional[str]:
        """
        :returns: The link to the agent conversation.
        """
        return self._agent_link

    @property
    def customer_phone(self) -> Optional[str]:
        """
        :returns: The phone number of the customer.
        """
        return self._customer_phone

    @property
    def customer_name(self) -> Optional[str]:
        """
        :returns: The name of the customer.
        """
        return self._customer_name

    @property
    def customer_link(self) -> Optional[str]:
        """
        :returns: The link to the customer conversation.
        """
        return self._customer_link

    @property
    def segment_recording_offset(self) -> Optional[str]:
        """
        :returns: The offset value for the recording.
        """
        return self._segment_recording_offset

    @property
    def media(self) -> Optional[Dict[str, object]]:
        """
        :returns: The media identifiers of the conversation.
        """
        return self._media

    @property
    def assessment_type(self) -> Optional[Dict[str, object]]:
        """
        :returns: The type of the assessment.
        """
        return self._assessment_type

    @property
    def assessment_percentage(self) -> Optional[Dict[str, object]]:
        """
        :returns: The percentage scored on the Assessments.
        """
        return self._assessment_percentage

    @property
    def url(self) -> Optional[str]:
        return self._url

    def fetch(self, token=values.unset) -> "InsightsSegmentsInstance":
        """
        Fetch the InsightsSegmentsInstance

        :param str token: The Token HTTP request header

        :returns: The fetched InsightsSegmentsInstance
        """
        return self._proxy.fetch(
            token=token,
        )

    async def fetch_async(self, token=values.unset) -> "InsightsSegmentsInstance":
        """
        Asynchronous coroutine to fetch the InsightsSegmentsInstance

        :param str token: The Token HTTP request header

        :returns: The fetched InsightsSegmentsInstance
        """
        return await self._proxy.fetch_async(
            token=token,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.FlexApi.V1.InsightsSegmentsInstance {}>".format(context)


class InsightsSegmentsContext(InstanceContext):
    def __init__(self, version: Version, segment_id: str):
        """
        Initialize the InsightsSegmentsContext

        :param version: Version that contains the resource
        :param segment_id: To unique id of the segment
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "segment_id": segment_id,
        }
        self._uri = "/Insights/Segments/{segment_id}".format(**self._solution)

    def fetch(self, token=values.unset) -> InsightsSegmentsInstance:
        """
        Fetch the InsightsSegmentsInstance

        :param str token: The Token HTTP request header

        :returns: The fetched InsightsSegmentsInstance
        """

        data = values.of(
            {
                "Token": token,
            }
        )

        payload = self._version.fetch(method="GET", uri=self._uri, params=data)

        return InsightsSegmentsInstance(
            self._version,
            payload,
            segment_id=self._solution["segment_id"],
        )

    async def fetch_async(self, token=values.unset) -> InsightsSegmentsInstance:
        """
        Asynchronous coroutine to fetch the InsightsSegmentsInstance

        :param str token: The Token HTTP request header

        :returns: The fetched InsightsSegmentsInstance
        """

        data = values.of(
            {
                "Token": token,
            }
        )

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, params=data
        )

        return InsightsSegmentsInstance(
            self._version,
            payload,
            segment_id=self._solution["segment_id"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.FlexApi.V1.InsightsSegmentsContext {}>".format(context)


class InsightsSegmentsPage(Page):
    def get_instance(self, payload) -> InsightsSegmentsInstance:
        """
        Build an instance of InsightsSegmentsInstance

        :param dict payload: Payload response from the API
        """
        return InsightsSegmentsInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.FlexApi.V1.InsightsSegmentsPage>"


class InsightsSegmentsList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the InsightsSegmentsList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._uri = "/Insights/Segments"

    def stream(
        self,
        token=values.unset,
        reservation_id=values.unset,
        limit=None,
        page_size=None,
    ) -> List[InsightsSegmentsInstance]:
        """
        Streams InsightsSegmentsInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str token: The Token HTTP request header
        :param List[str] reservation_id: The list of reservation Ids
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            token=token, reservation_id=reservation_id, page_size=limits["page_size"]
        )

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        token=values.unset,
        reservation_id=values.unset,
        limit=None,
        page_size=None,
    ) -> List[InsightsSegmentsInstance]:
        """
        Asynchronously streams InsightsSegmentsInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str token: The Token HTTP request header
        :param List[str] reservation_id: The list of reservation Ids
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            token=token, reservation_id=reservation_id, page_size=limits["page_size"]
        )

        return await self._version.stream_async(page, limits["limit"])

    def list(
        self,
        token=values.unset,
        reservation_id=values.unset,
        limit=None,
        page_size=None,
    ) -> List[InsightsSegmentsInstance]:
        """
        Lists InsightsSegmentsInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str token: The Token HTTP request header
        :param List[str] reservation_id: The list of reservation Ids
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        return list(
            self.stream(
                token=token,
                reservation_id=reservation_id,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        token=values.unset,
        reservation_id=values.unset,
        limit=None,
        page_size=None,
    ) -> List[InsightsSegmentsInstance]:
        """
        Asynchronously lists InsightsSegmentsInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str token: The Token HTTP request header
        :param List[str] reservation_id: The list of reservation Ids
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        return list(
            await self.stream_async(
                token=token,
                reservation_id=reservation_id,
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self,
        token=values.unset,
        reservation_id=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ) -> InsightsSegmentsPage:
        """
        Retrieve a single page of InsightsSegmentsInstance records from the API.
        Request is executed immediately

        :param str token: The Token HTTP request header
        :param List[str] reservation_id: The list of reservation Ids
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of InsightsSegmentsInstance
        """
        data = values.of(
            {
                "Token": token,
                "ReservationId": serialize.map(reservation_id, lambda e: e),
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return InsightsSegmentsPage(self._version, response)

    async def page_async(
        self,
        token=values.unset,
        reservation_id=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ) -> InsightsSegmentsPage:
        """
        Asynchronously retrieve a single page of InsightsSegmentsInstance records from the API.
        Request is executed immediately

        :param str token: The Token HTTP request header
        :param List[str] reservation_id: The list of reservation Ids
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of InsightsSegmentsInstance
        """
        data = values.of(
            {
                "Token": token,
                "ReservationId": serialize.map(reservation_id, lambda e: e),
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return InsightsSegmentsPage(self._version, response)

    def get_page(self, target_url) -> InsightsSegmentsPage:
        """
        Retrieve a specific page of InsightsSegmentsInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of InsightsSegmentsInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return InsightsSegmentsPage(self._version, response)

    async def get_page_async(self, target_url) -> InsightsSegmentsPage:
        """
        Asynchronously retrieve a specific page of InsightsSegmentsInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of InsightsSegmentsInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return InsightsSegmentsPage(self._version, response)

    def get(self, segment_id) -> InsightsSegmentsContext:
        """
        Constructs a InsightsSegmentsContext

        :param segment_id: To unique id of the segment
        """
        return InsightsSegmentsContext(self._version, segment_id=segment_id)

    def __call__(self, segment_id) -> InsightsSegmentsContext:
        """
        Constructs a InsightsSegmentsContext

        :param segment_id: To unique id of the segment
        """
        return InsightsSegmentsContext(self._version, segment_id=segment_id)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.FlexApi.V1.InsightsSegmentsList>"
