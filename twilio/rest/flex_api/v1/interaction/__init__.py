"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Flex
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.flex_api.v1.interaction.interaction_channel import InteractionChannelList


class InteractionList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the InteractionList

        :param Version version: Version that contains the resource
        
        :returns: twilio.rest.flex_api.v1.interaction.InteractionList
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Interactions'.format(**self._solution)
        
        
    
    
    def create(self, channel, routing):
        """
        Create the InteractionInstance
        :param object channel: The Interaction's channel.
        :param object routing: The Interaction's routing logic.
        
        :returns: The created InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionInstance
        """
        data = values.of({ 
            'Channel': serialize.object(channel),
            'Routing': serialize.object(routing),
        })

        payload = self._version.create(method='POST', uri=self._uri, data=data)
        return InteractionInstance(self._version, payload)
    

    def get(self, sid):
        """
        Constructs a InteractionContext
        
        :param sid: The SID of the Interaction resource to fetch.
        
        :returns: twilio.rest.flex_api.v1.interaction.InteractionContext
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionContext
        """
        return InteractionContext(self._version, sid=sid)

    def __call__(self, sid):
        """
        Constructs a InteractionContext
        
        :param sid: The SID of the Interaction resource to fetch.
        
        :returns: twilio.rest.flex_api.v1.interaction.InteractionContext
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionContext
        """
        return InteractionContext(self._version, sid=sid)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.FlexApi.V1.InteractionList>'


class InteractionContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'sid': sid,  }
        self._uri = '/Interactions/${sid}'
        
        self._channels = None
    
    def fetch(self):
        
        """
        Fetch the InteractionInstance

        :returns: The fetched InteractionInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return InteractionInstance(self._version, payload, sid=self._solution['sid'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.FlexApi.V1.InteractionContext>'



class InteractionInstance(InstanceResource):
    def __init__(self, version, payload, sid: str):
        super().__init__(version)
        self._properties = { 
            'sid' : payload.get('sid'),
            'channel' : payload.get('channel'),
            'routing' : payload.get('routing'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = InteractionContext(
                self._version,
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def channels(self):
        return self._proxy.channels
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.FlexApi.V1.InteractionInstance {}>'.format(context)



