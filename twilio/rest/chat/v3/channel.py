r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Chat
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from typing import Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class ChannelInstance(InstanceResource):
    class ChannelType(object):
        PUBLIC = "public"
        PRIVATE = "private"

    class WebhookEnabledType(object):
        TRUE = "true"
        FALSE = "false"

    def __init__(
        self,
        version,
        payload,
        service_sid: Optional[str] = None,
        sid: Optional[str] = None,
    ):
        """
        Initialize the ChannelInstance
        """
        super().__init__(version)

        self._sid: Optional[str] = payload.get("sid")
        self._account_sid: Optional[str] = payload.get("account_sid")
        self._service_sid: Optional[str] = payload.get("service_sid")
        self._friendly_name: Optional[str] = payload.get("friendly_name")
        self._unique_name: Optional[str] = payload.get("unique_name")
        self._attributes: Optional[str] = payload.get("attributes")
        self._type: Optional["ChannelInstance.ChannelType"] = payload.get("type")
        self._date_created: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_created")
        )
        self._date_updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_updated")
        )
        self._created_by: Optional[str] = payload.get("created_by")
        self._members_count: Optional[int] = deserialize.integer(
            payload.get("members_count")
        )
        self._messages_count: Optional[int] = deserialize.integer(
            payload.get("messages_count")
        )
        self._messaging_service_sid: Optional[str] = payload.get(
            "messaging_service_sid"
        )
        self._url: Optional[str] = payload.get("url")

        self._solution = {
            "service_sid": service_sid or self._service_sid,
            "sid": sid or self._sid,
        }
        self._context: Optional[ChannelContext] = None

    @property
    def _proxy(self) -> "ChannelContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: ChannelContext for this ChannelInstance
        """
        if self._context is None:
            self._context = ChannelContext(
                self._version,
                service_sid=self._solution["service_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def sid(self) -> Optional[str]:
        """
        :returns: The unique string that we created to identify the Channel resource.
        """
        return self._sid

    @property
    def account_sid(self) -> Optional[str]:
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Channel resource.
        """
        return self._account_sid

    @property
    def service_sid(self) -> Optional[str]:
        """
        :returns: The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the Channel resource is associated with.
        """
        return self._service_sid

    @property
    def friendly_name(self) -> Optional[str]:
        """
        :returns: The string that you assigned to describe the resource.
        """
        return self._friendly_name

    @property
    def unique_name(self) -> Optional[str]:
        """
        :returns: An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
        """
        return self._unique_name

    @property
    def attributes(self) -> Optional[str]:
        """
        :returns: The JSON string that stores application-specific data. If attributes have not been set, `{}` is returned.
        """
        return self._attributes

    @property
    def type(self) -> Optional["ChannelInstance.ChannelType"]:
        return self._type

    @property
    def date_created(self) -> Optional[datetime]:
        """
        :returns: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        """
        return self._date_created

    @property
    def date_updated(self) -> Optional[datetime]:
        """
        :returns: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        """
        return self._date_updated

    @property
    def created_by(self) -> Optional[str]:
        """
        :returns: The `identity` of the User that created the channel. If the Channel was created by using the API, the value is `system`.
        """
        return self._created_by

    @property
    def members_count(self) -> Optional[int]:
        """
        :returns: The number of Members in the Channel.
        """
        return self._members_count

    @property
    def messages_count(self) -> Optional[int]:
        """
        :returns: The number of Messages that have been passed in the Channel.
        """
        return self._messages_count

    @property
    def messaging_service_sid(self) -> Optional[str]:
        """
        :returns: The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this channel belongs to.
        """
        return self._messaging_service_sid

    @property
    def url(self) -> Optional[str]:
        """
        :returns: The absolute URL of the Channel resource.
        """
        return self._url

    def update(
        self,
        x_twilio_webhook_enabled=values.unset,
        type=values.unset,
        messaging_service_sid=values.unset,
    ) -> "ChannelInstance":
        """
        Update the ChannelInstance

        :param "ChannelInstance.WebhookEnabledType" x_twilio_webhook_enabled: The X-Twilio-Webhook-Enabled HTTP request header
        :param "ChannelInstance.ChannelType" type:
        :param str messaging_service_sid: The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this channel belongs to.

        :returns: The updated ChannelInstance
        """
        return self._proxy.update(
            x_twilio_webhook_enabled=x_twilio_webhook_enabled,
            type=type,
            messaging_service_sid=messaging_service_sid,
        )

    async def update_async(
        self,
        x_twilio_webhook_enabled=values.unset,
        type=values.unset,
        messaging_service_sid=values.unset,
    ) -> "ChannelInstance":
        """
        Asynchronous coroutine to update the ChannelInstance

        :param "ChannelInstance.WebhookEnabledType" x_twilio_webhook_enabled: The X-Twilio-Webhook-Enabled HTTP request header
        :param "ChannelInstance.ChannelType" type:
        :param str messaging_service_sid: The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this channel belongs to.

        :returns: The updated ChannelInstance
        """
        return await self._proxy.update_async(
            x_twilio_webhook_enabled=x_twilio_webhook_enabled,
            type=type,
            messaging_service_sid=messaging_service_sid,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Chat.V3.ChannelInstance {}>".format(context)


class ChannelContext(InstanceContext):
    def __init__(self, version: Version, service_sid: str, sid: str):
        """
        Initialize the ChannelContext

        :param version: Version that contains the resource
        :param service_sid: The unique SID identifier of the Service.
        :param sid: A 34 character string that uniquely identifies this Channel.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "service_sid": service_sid,
            "sid": sid,
        }
        self._uri = "/Services/{service_sid}/Channels/{sid}".format(**self._solution)

    def update(
        self,
        x_twilio_webhook_enabled=values.unset,
        type=values.unset,
        messaging_service_sid=values.unset,
    ) -> ChannelInstance:
        """
        Update the ChannelInstance

        :param "ChannelInstance.WebhookEnabledType" x_twilio_webhook_enabled: The X-Twilio-Webhook-Enabled HTTP request header
        :param "ChannelInstance.ChannelType" type:
        :param str messaging_service_sid: The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this channel belongs to.

        :returns: The updated ChannelInstance
        """
        data = values.of(
            {
                "Type": type,
                "MessagingServiceSid": messaging_service_sid,
            }
        )
        headers = values.of(
            {
                "X-Twilio-Webhook-Enabled": x_twilio_webhook_enabled,
            }
        )

        payload = self._version.update(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ChannelInstance(
            self._version,
            payload,
            service_sid=self._solution["service_sid"],
            sid=self._solution["sid"],
        )

    async def update_async(
        self,
        x_twilio_webhook_enabled=values.unset,
        type=values.unset,
        messaging_service_sid=values.unset,
    ) -> ChannelInstance:
        """
        Asynchronous coroutine to update the ChannelInstance

        :param "ChannelInstance.WebhookEnabledType" x_twilio_webhook_enabled: The X-Twilio-Webhook-Enabled HTTP request header
        :param "ChannelInstance.ChannelType" type:
        :param str messaging_service_sid: The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this channel belongs to.

        :returns: The updated ChannelInstance
        """
        data = values.of(
            {
                "Type": type,
                "MessagingServiceSid": messaging_service_sid,
            }
        )
        headers = values.of(
            {
                "X-Twilio-Webhook-Enabled": x_twilio_webhook_enabled,
            }
        )

        payload = await self._version.update_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ChannelInstance(
            self._version,
            payload,
            service_sid=self._solution["service_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Chat.V3.ChannelContext {}>".format(context)


class ChannelList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the ChannelList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self, service_sid, sid) -> ChannelContext:
        """
        Constructs a ChannelContext

        :param service_sid: The unique SID identifier of the Service.
        :param sid: A 34 character string that uniquely identifies this Channel.
        """
        return ChannelContext(self._version, service_sid=service_sid, sid=sid)

    def __call__(self, service_sid, sid) -> ChannelContext:
        """
        Constructs a ChannelContext

        :param service_sid: The unique SID identifier of the Service.
        :param sid: A 34 character string that uniquely identifies this Channel.
        """
        return ChannelContext(self._version, service_sid=service_sid, sid=sid)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Chat.V3.ChannelList>"
