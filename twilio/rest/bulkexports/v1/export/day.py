"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Bulkexports
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# 


class DayContext(InstanceContext):
    def __init__(self, version: Version, resource_type: str, day: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'resource_type': resource_type, 'day': day,  }
        self._uri = '/Exports/${resource_type}/Days/${day}'
        
    
    def fetch(self):
        
        """
        Fetch the DayInstance

        :returns: The fetched DayInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return DayInstance(self._version, payload, resource_type=self._solution['resource_type'], day=self._solution['day'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.DayContext>'



class DayInstance(InstanceResource):
    def __init__(self, version, payload, resource_type: str, day: str):
        super().__init__(version)
        self._properties = { 
            'redirect_to' : payload.get('redirect_to'),
        }

        self._context = None
        self._solution = {
            'resource_type': resource_type or self._properties['resource_type'],'day': day or self._properties['day'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = DayContext(
                self._version,
                resource_type=self._solution['resource_type'],day=self._solution['day'],
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.DayInstance {}>'.format(context)



class DayList(ListResource):
    def __init__(self, version: Version, resource_type: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'resource_type': resource_type,  }
        self._uri = '/Exports/${resource_type}/Days'
        

    """
    def page(self, page_size):
        
        data = values.of({
            'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return DayPage(self._version, payload, resource_type=self._solution['resource_type'], )
    """


    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.DayList>'

