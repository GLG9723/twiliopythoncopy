"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Taskrouter
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# 


class EventContext(InstanceContext):
    def __init__(self, version: Version, workspace_sid: str, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'workspace_sid': workspace_sid, 'sid': sid,  }
        self._uri = '/Workspaces/${workspace_sid}/Events/${sid}'
        
    
    def fetch(self):
        
        """
        Fetch the EventInstance

        :returns: The fetched EventInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return EventInstance(self._version, payload, workspace_sid=self._solution['workspace_sid'], sid=self._solution['sid'], )
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.EventContext>'



class EventInstance(InstanceResource):
    def __init__(self, version, payload, workspace_sid: str, sid: str):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'actor_sid' : payload.get('actor_sid'),
            'actor_type' : payload.get('actor_type'),
            'actor_url' : payload.get('actor_url'),
            'description' : payload.get('description'),
            'event_data' : payload.get('event_data'),
            'event_date' : payload.get('event_date'),
            'event_date_ms' : payload.get('event_date_ms'),
            'event_type' : payload.get('event_type'),
            'resource_sid' : payload.get('resource_sid'),
            'resource_type' : payload.get('resource_type'),
            'resource_url' : payload.get('resource_url'),
            'sid' : payload.get('sid'),
            'source' : payload.get('source'),
            'source_ip_address' : payload.get('source_ip_address'),
            'url' : payload.get('url'),
            'workspace_sid' : payload.get('workspace_sid'),
        }

        self._context = None
        self._solution = {
            'workspace_sid': workspace_sid or self._properties['workspace_sid'],'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = EventContext(
                self._version,
                workspace_sid=self._solution['workspace_sid'],sid=self._solution['sid'],
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.EventInstance {}>'.format(context)



class EventListInstance(ListResource):
    def __init__(self, version: Version, workspace_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'workspace_sid': workspace_sid,  }
        self._uri = '/Workspaces/${workspace_sid}/Events'
        
    
    """
    def page(self, end_date, event_type, minutes, reservation_sid, start_date, task_queue_sid, task_sid, worker_sid, workflow_sid, task_channel, sid, page_size):
        
        data = values.of({
            'end_date': end_date,'event_type': event_type,'minutes': minutes,'reservation_sid': reservation_sid,'start_date': start_date,'task_queue_sid': task_queue_sid,'task_sid': task_sid,'worker_sid': worker_sid,'workflow_sid': workflow_sid,'task_channel': task_channel,'sid': sid,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return EventPage(self._version, payload, workspace_sid=self._solution['workspace_sid'], )
    """
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.EventListInstance>'

