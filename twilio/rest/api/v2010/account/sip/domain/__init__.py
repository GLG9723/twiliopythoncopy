r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Api
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import datetime
from typing import Dict, List, Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.api.v2010.account.sip.domain.auth_types import AuthTypesList
from twilio.rest.api.v2010.account.sip.domain.credential_list_mapping import (
    CredentialListMappingList,
)
from twilio.rest.api.v2010.account.sip.domain.ip_access_control_list_mapping import (
    IpAccessControlListMappingList,
)


class DomainInstance(InstanceResource):
    def __init__(self, version, payload, account_sid: str, sid: Optional[str] = None):
        """
        Initialize the DomainInstance
        """
        super().__init__(version)

        self._account_sid: Optional[str] = payload.get("account_sid")
        self._api_version: Optional[str] = payload.get("api_version")
        self._auth_type: Optional[str] = payload.get("auth_type")
        self._date_created: Optional[datetime] = deserialize.rfc2822_datetime(
            payload.get("date_created")
        )
        self._date_updated: Optional[datetime] = deserialize.rfc2822_datetime(
            payload.get("date_updated")
        )
        self._domain_name: Optional[str] = payload.get("domain_name")
        self._friendly_name: Optional[str] = payload.get("friendly_name")
        self._sid: Optional[str] = payload.get("sid")
        self._uri: Optional[str] = payload.get("uri")
        self._voice_fallback_method: Optional[str] = payload.get(
            "voice_fallback_method"
        )
        self._voice_fallback_url: Optional[str] = payload.get("voice_fallback_url")
        self._voice_method: Optional[str] = payload.get("voice_method")
        self._voice_status_callback_method: Optional[str] = payload.get(
            "voice_status_callback_method"
        )
        self._voice_status_callback_url: Optional[str] = payload.get(
            "voice_status_callback_url"
        )
        self._voice_url: Optional[str] = payload.get("voice_url")
        self._subresource_uris: Optional[Dict[str, object]] = payload.get(
            "subresource_uris"
        )
        self._sip_registration: Optional[bool] = payload.get("sip_registration")
        self._emergency_calling_enabled: Optional[bool] = payload.get(
            "emergency_calling_enabled"
        )
        self._secure: Optional[bool] = payload.get("secure")
        self._byoc_trunk_sid: Optional[str] = payload.get("byoc_trunk_sid")
        self._emergency_caller_sid: Optional[str] = payload.get("emergency_caller_sid")

        self._solution = {
            "account_sid": account_sid,
            "sid": sid or self._sid,
        }
        self._context: Optional[DomainContext] = None

    @property
    def _proxy(self) -> "DomainContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: DomainContext for this DomainInstance
        """
        if self._context is None:
            self._context = DomainContext(
                self._version,
                account_sid=self._solution["account_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def account_sid(self) -> Optional[str]:
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource.
        """
        return self._account_sid

    @property
    def api_version(self) -> Optional[str]:
        """
        :returns: The API version used to process the call.
        """
        return self._api_version

    @property
    def auth_type(self) -> Optional[str]:
        """
        :returns: The types of authentication you have mapped to your domain. Can be: `IP_ACL` and `CREDENTIAL_LIST`. If you have both defined for your domain, both will be returned in a comma delimited string. If `auth_type` is not defined, the domain will not be able to receive any traffic.
        """
        return self._auth_type

    @property
    def date_created(self) -> Optional[datetime]:
        """
        :returns: The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
        """
        return self._date_created

    @property
    def date_updated(self) -> Optional[datetime]:
        """
        :returns: The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
        """
        return self._date_updated

    @property
    def domain_name(self) -> Optional[str]:
        """
        :returns: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \"-\" and must end with `sip.twilio.com`.
        """
        return self._domain_name

    @property
    def friendly_name(self) -> Optional[str]:
        """
        :returns: The string that you assigned to describe the resource.
        """
        return self._friendly_name

    @property
    def sid(self) -> Optional[str]:
        """
        :returns: The unique string that that we created to identify the SipDomain resource.
        """
        return self._sid

    @property
    def uri(self) -> Optional[str]:
        """
        :returns: The URI of the resource, relative to `https://api.twilio.com`.
        """
        return self._uri

    @property
    def voice_fallback_method(self) -> Optional[str]:
        """
        :returns: The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        """
        return self._voice_fallback_method

    @property
    def voice_fallback_url(self) -> Optional[str]:
        """
        :returns: The URL that we call when an error occurs while retrieving or executing the TwiML requested from `voice_url`.
        """
        return self._voice_fallback_url

    @property
    def voice_method(self) -> Optional[str]:
        """
        :returns: The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`.
        """
        return self._voice_method

    @property
    def voice_status_callback_method(self) -> Optional[str]:
        """
        :returns: The HTTP method we use to call `voice_status_callback_url`. Either `GET` or `POST`.
        """
        return self._voice_status_callback_method

    @property
    def voice_status_callback_url(self) -> Optional[str]:
        """
        :returns: The URL that we call to pass status parameters (such as call ended) to your application.
        """
        return self._voice_status_callback_url

    @property
    def voice_url(self) -> Optional[str]:
        """
        :returns: The URL we call using the `voice_method` when the domain receives a call.
        """
        return self._voice_url

    @property
    def subresource_uris(self) -> Optional[Dict[str, object]]:
        """
        :returns: A list of mapping resources associated with the SIP Domain resource identified by their relative URIs.
        """
        return self._subresource_uris

    @property
    def sip_registration(self) -> Optional[bool]:
        """
        :returns: Whether to allow SIP Endpoints to register with the domain to receive calls.
        """
        return self._sip_registration

    @property
    def emergency_calling_enabled(self) -> Optional[bool]:
        """
        :returns: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        """
        return self._emergency_calling_enabled

    @property
    def secure(self) -> Optional[bool]:
        """
        :returns: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        """
        return self._secure

    @property
    def byoc_trunk_sid(self) -> Optional[str]:
        """
        :returns: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        """
        return self._byoc_trunk_sid

    @property
    def emergency_caller_sid(self) -> Optional[str]:
        """
        :returns: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
        """
        return self._emergency_caller_sid

    def delete(self) -> bool:
        """
        Deletes the DomainInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete()

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the DomainInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async()

    def fetch(self) -> "DomainInstance":
        """
        Fetch the DomainInstance


        :returns: The fetched DomainInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "DomainInstance":
        """
        Asynchronous coroutine to fetch the DomainInstance


        :returns: The fetched DomainInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        friendly_name=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_status_callback_method=values.unset,
        voice_status_callback_url=values.unset,
        voice_url=values.unset,
        sip_registration=values.unset,
        domain_name=values.unset,
        emergency_calling_enabled=values.unset,
        secure=values.unset,
        byoc_trunk_sid=values.unset,
        emergency_caller_sid=values.unset,
    ) -> "DomainInstance":
        """
        Update the DomainInstance

        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
        :param str voice_method: The HTTP method we should use to call `voice_url`
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_url: The URL we should call when the domain receives a call.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.

        :returns: The updated DomainInstance
        """
        return self._proxy.update(
            friendly_name=friendly_name,
            voice_fallback_method=voice_fallback_method,
            voice_fallback_url=voice_fallback_url,
            voice_method=voice_method,
            voice_status_callback_method=voice_status_callback_method,
            voice_status_callback_url=voice_status_callback_url,
            voice_url=voice_url,
            sip_registration=sip_registration,
            domain_name=domain_name,
            emergency_calling_enabled=emergency_calling_enabled,
            secure=secure,
            byoc_trunk_sid=byoc_trunk_sid,
            emergency_caller_sid=emergency_caller_sid,
        )

    async def update_async(
        self,
        friendly_name=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_status_callback_method=values.unset,
        voice_status_callback_url=values.unset,
        voice_url=values.unset,
        sip_registration=values.unset,
        domain_name=values.unset,
        emergency_calling_enabled=values.unset,
        secure=values.unset,
        byoc_trunk_sid=values.unset,
        emergency_caller_sid=values.unset,
    ) -> "DomainInstance":
        """
        Asynchronous coroutine to update the DomainInstance

        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
        :param str voice_method: The HTTP method we should use to call `voice_url`
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_url: The URL we should call when the domain receives a call.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.

        :returns: The updated DomainInstance
        """
        return await self._proxy.update_async(
            friendly_name=friendly_name,
            voice_fallback_method=voice_fallback_method,
            voice_fallback_url=voice_fallback_url,
            voice_method=voice_method,
            voice_status_callback_method=voice_status_callback_method,
            voice_status_callback_url=voice_status_callback_url,
            voice_url=voice_url,
            sip_registration=sip_registration,
            domain_name=domain_name,
            emergency_calling_enabled=emergency_calling_enabled,
            secure=secure,
            byoc_trunk_sid=byoc_trunk_sid,
            emergency_caller_sid=emergency_caller_sid,
        )

    @property
    def auth(self) -> AuthTypesList:
        """
        Access the auth
        """
        return self._proxy.auth

    @property
    def credential_list_mappings(self) -> CredentialListMappingList:
        """
        Access the credential_list_mappings
        """
        return self._proxy.credential_list_mappings

    @property
    def ip_access_control_list_mappings(self) -> IpAccessControlListMappingList:
        """
        Access the ip_access_control_list_mappings
        """
        return self._proxy.ip_access_control_list_mappings

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.DomainInstance {}>".format(context)


class DomainContext(InstanceContext):
    def __init__(self, version: Version, account_sid: str, sid: str):
        """
        Initialize the DomainContext

        :param version: Version that contains the resource
        :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
        :param sid: The Twilio-provided string that uniquely identifies the SipDomain resource to update.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
            "sid": sid,
        }
        self._uri = "/Accounts/{account_sid}/SIP/Domains/{sid}.json".format(
            **self._solution
        )

        self._auth: Optional[AuthTypesList] = None
        self._credential_list_mappings: Optional[CredentialListMappingList] = None
        self._ip_access_control_list_mappings: Optional[
            IpAccessControlListMappingList
        ] = None

    def delete(self) -> bool:
        """
        Deletes the DomainInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the DomainInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def fetch(self) -> DomainInstance:
        """
        Fetch the DomainInstance


        :returns: The fetched DomainInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return DomainInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> DomainInstance:
        """
        Asynchronous coroutine to fetch the DomainInstance


        :returns: The fetched DomainInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return DomainInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    def update(
        self,
        friendly_name=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_status_callback_method=values.unset,
        voice_status_callback_url=values.unset,
        voice_url=values.unset,
        sip_registration=values.unset,
        domain_name=values.unset,
        emergency_calling_enabled=values.unset,
        secure=values.unset,
        byoc_trunk_sid=values.unset,
        emergency_caller_sid=values.unset,
    ) -> DomainInstance:
        """
        Update the DomainInstance

        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
        :param str voice_method: The HTTP method we should use to call `voice_url`
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_url: The URL we should call when the domain receives a call.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.

        :returns: The updated DomainInstance
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "VoiceFallbackMethod": voice_fallback_method,
                "VoiceFallbackUrl": voice_fallback_url,
                "VoiceMethod": voice_method,
                "VoiceStatusCallbackMethod": voice_status_callback_method,
                "VoiceStatusCallbackUrl": voice_status_callback_url,
                "VoiceUrl": voice_url,
                "SipRegistration": sip_registration,
                "DomainName": domain_name,
                "EmergencyCallingEnabled": emergency_calling_enabled,
                "Secure": secure,
                "ByocTrunkSid": byoc_trunk_sid,
                "EmergencyCallerSid": emergency_caller_sid,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return DomainInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    async def update_async(
        self,
        friendly_name=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_status_callback_method=values.unset,
        voice_status_callback_url=values.unset,
        voice_url=values.unset,
        sip_registration=values.unset,
        domain_name=values.unset,
        emergency_calling_enabled=values.unset,
        secure=values.unset,
        byoc_trunk_sid=values.unset,
        emergency_caller_sid=values.unset,
    ) -> DomainInstance:
        """
        Asynchronous coroutine to update the DomainInstance

        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
        :param str voice_method: The HTTP method we should use to call `voice_url`
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_url: The URL we should call when the domain receives a call.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.

        :returns: The updated DomainInstance
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "VoiceFallbackMethod": voice_fallback_method,
                "VoiceFallbackUrl": voice_fallback_url,
                "VoiceMethod": voice_method,
                "VoiceStatusCallbackMethod": voice_status_callback_method,
                "VoiceStatusCallbackUrl": voice_status_callback_url,
                "VoiceUrl": voice_url,
                "SipRegistration": sip_registration,
                "DomainName": domain_name,
                "EmergencyCallingEnabled": emergency_calling_enabled,
                "Secure": secure,
                "ByocTrunkSid": byoc_trunk_sid,
                "EmergencyCallerSid": emergency_caller_sid,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return DomainInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    @property
    def auth(self) -> AuthTypesList:
        """
        Access the auth
        """
        if self._auth is None:
            self._auth = AuthTypesList(
                self._version,
                self._solution["account_sid"],
                self._solution["sid"],
            )
        return self._auth

    @property
    def credential_list_mappings(self) -> CredentialListMappingList:
        """
        Access the credential_list_mappings
        """
        if self._credential_list_mappings is None:
            self._credential_list_mappings = CredentialListMappingList(
                self._version,
                self._solution["account_sid"],
                self._solution["sid"],
            )
        return self._credential_list_mappings

    @property
    def ip_access_control_list_mappings(self) -> IpAccessControlListMappingList:
        """
        Access the ip_access_control_list_mappings
        """
        if self._ip_access_control_list_mappings is None:
            self._ip_access_control_list_mappings = IpAccessControlListMappingList(
                self._version,
                self._solution["account_sid"],
                self._solution["sid"],
            )
        return self._ip_access_control_list_mappings

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.DomainContext {}>".format(context)


class DomainPage(Page):
    def get_instance(self, payload) -> DomainInstance:
        """
        Build an instance of DomainInstance

        :param dict payload: Payload response from the API
        """
        return DomainInstance(
            self._version, payload, account_sid=self._solution["account_sid"]
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Api.V2010.DomainPage>"


class DomainList(ListResource):
    def __init__(self, version: Version, account_sid: str):
        """
        Initialize the DomainList

        :param version: Version that contains the resource
        :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
        }
        self._uri = "/Accounts/{account_sid}/SIP/Domains.json".format(**self._solution)

    def create(
        self,
        domain_name,
        friendly_name=values.unset,
        voice_url=values.unset,
        voice_method=values.unset,
        voice_fallback_url=values.unset,
        voice_fallback_method=values.unset,
        voice_status_callback_url=values.unset,
        voice_status_callback_method=values.unset,
        sip_registration=values.unset,
        emergency_calling_enabled=values.unset,
        secure=values.unset,
        byoc_trunk_sid=values.unset,
        emergency_caller_sid=values.unset,
    ) -> DomainInstance:
        """
        Create the DomainInstance

        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_url: The URL we should when the domain receives a call.
        :param str voice_method: The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.

        :returns: The created DomainInstance
        """
        data = values.of(
            {
                "DomainName": domain_name,
                "FriendlyName": friendly_name,
                "VoiceUrl": voice_url,
                "VoiceMethod": voice_method,
                "VoiceFallbackUrl": voice_fallback_url,
                "VoiceFallbackMethod": voice_fallback_method,
                "VoiceStatusCallbackUrl": voice_status_callback_url,
                "VoiceStatusCallbackMethod": voice_status_callback_method,
                "SipRegistration": sip_registration,
                "EmergencyCallingEnabled": emergency_calling_enabled,
                "Secure": secure,
                "ByocTrunkSid": byoc_trunk_sid,
                "EmergencyCallerSid": emergency_caller_sid,
            }
        )

        payload = self._version.create(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return DomainInstance(
            self._version, payload, account_sid=self._solution["account_sid"]
        )

    async def create_async(
        self,
        domain_name,
        friendly_name=values.unset,
        voice_url=values.unset,
        voice_method=values.unset,
        voice_fallback_url=values.unset,
        voice_fallback_method=values.unset,
        voice_status_callback_url=values.unset,
        voice_status_callback_method=values.unset,
        sip_registration=values.unset,
        emergency_calling_enabled=values.unset,
        secure=values.unset,
        byoc_trunk_sid=values.unset,
        emergency_caller_sid=values.unset,
    ) -> DomainInstance:
        """
        Asynchronously create the DomainInstance

        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_url: The URL we should when the domain receives a call.
        :param str voice_method: The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.

        :returns: The created DomainInstance
        """
        data = values.of(
            {
                "DomainName": domain_name,
                "FriendlyName": friendly_name,
                "VoiceUrl": voice_url,
                "VoiceMethod": voice_method,
                "VoiceFallbackUrl": voice_fallback_url,
                "VoiceFallbackMethod": voice_fallback_method,
                "VoiceStatusCallbackUrl": voice_status_callback_url,
                "VoiceStatusCallbackMethod": voice_status_callback_method,
                "SipRegistration": sip_registration,
                "EmergencyCallingEnabled": emergency_calling_enabled,
                "Secure": secure,
                "ByocTrunkSid": byoc_trunk_sid,
                "EmergencyCallerSid": emergency_caller_sid,
            }
        )

        payload = await self._version.create_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return DomainInstance(
            self._version, payload, account_sid=self._solution["account_sid"]
        )

    def stream(self, limit=None, page_size=None) -> List[DomainInstance]:
        """
        Streams DomainInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(page_size=limits["page_size"])

        return self._version.stream(page, limits["limit"])

    async def stream_async(self, limit=None, page_size=None) -> List[DomainInstance]:
        """
        Asynchronously streams DomainInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(page_size=limits["page_size"])

        return await self._version.stream_async(page, limits["limit"])

    def list(self, limit=None, page_size=None) -> List[DomainInstance]:
        """
        Lists DomainInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        return list(
            self.stream(
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(self, limit=None, page_size=None) -> List[DomainInstance]:
        """
        Asynchronously lists DomainInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        return list(
            await self.stream_async(
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self, page_token=values.unset, page_number=values.unset, page_size=values.unset
    ) -> DomainPage:
        """
        Retrieve a single page of DomainInstance records from the API.
        Request is executed immediately

        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of DomainInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return DomainPage(self._version, response, self._solution)

    async def page_async(
        self, page_token=values.unset, page_number=values.unset, page_size=values.unset
    ) -> DomainPage:
        """
        Asynchronously retrieve a single page of DomainInstance records from the API.
        Request is executed immediately

        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of DomainInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return DomainPage(self._version, response, self._solution)

    def get_page(self, target_url) -> DomainPage:
        """
        Retrieve a specific page of DomainInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of DomainInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return DomainPage(self._version, response, self._solution)

    async def get_page_async(self, target_url) -> DomainPage:
        """
        Asynchronously retrieve a specific page of DomainInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of DomainInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return DomainPage(self._version, response, self._solution)

    def get(self, sid) -> DomainContext:
        """
        Constructs a DomainContext

        :param sid: The Twilio-provided string that uniquely identifies the SipDomain resource to update.
        """
        return DomainContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __call__(self, sid) -> DomainContext:
        """
        Constructs a DomainContext

        :param sid: The Twilio-provided string that uniquely identifies the SipDomain resource to update.
        """
        return DomainContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Api.V2010.DomainList>"
