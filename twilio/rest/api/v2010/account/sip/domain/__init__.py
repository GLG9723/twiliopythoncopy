"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Api
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.api.v2010.account.sip.domain.auth_types import AuthTypesList
from twilio.rest.api.v2010.account.sip.domain.credential_list_mapping import CredentialListMappingList
from twilio.rest.api.v2010.account.sip.domain.ip_access_control_list_mapping import IpAccessControlListMappingList


class DomainList(ListResource):

    def __init__(self, version: Version, account_sid: str):
        """
        Initialize the DomainList

        :param Version version: Version that contains the resource
        :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
        
        :returns: twilio.rest.api.v2010.account.sip.domain.DomainList
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainList
        """
        super().__init__(version)

        # Path Solution
        self._solution = { 'account_sid': account_sid,  }
        self._uri = '/Accounts/${account_sid}/SIP/Domains.json'.format(**self._solution)
        
        
    
    
    
    
    def create(self, domain_name, friendly_name=values.unset, voice_url=values.unset, voice_method=values.unset, voice_fallback_url=values.unset, voice_fallback_method=values.unset, voice_status_callback_url=values.unset, voice_status_callback_method=values.unset, sip_registration=values.unset, emergency_calling_enabled=values.unset, secure=values.unset, byoc_trunk_sid=values.unset, emergency_caller_sid=values.unset):
        """
        Create the DomainInstance
        :param str domain_name: The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
        :param str friendly_name: A descriptive string that you created to describe the resource. It can be up to 64 characters long.
        :param str voice_url: The URL we should when the domain receives a call.
        :param str voice_method: The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
        :param str voice_fallback_url: The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
        :param str voice_fallback_method: The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
        :param str voice_status_callback_url: The URL that we should call to pass status parameters (such as call ended) to your application.
        :param str voice_status_callback_method: The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
        :param bool sip_registration: Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
        :param bool emergency_calling_enabled: Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
        :param bool secure: Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
        :param str byoc_trunk_sid: The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
        :param str emergency_caller_sid: Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
        
        :returns: The created DomainInstance
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainInstance
        """
        data = values.of({ 
            'DomainName': domain_name,
            'FriendlyName': friendly_name,
            'VoiceUrl': voice_url,
            'VoiceMethod': voice_method,
            'VoiceFallbackUrl': voice_fallback_url,
            'VoiceFallbackMethod': voice_fallback_method,
            'VoiceStatusCallbackUrl': voice_status_callback_url,
            'VoiceStatusCallbackMethod': voice_status_callback_method,
            'SipRegistration': sip_registration,
            'EmergencyCallingEnabled': emergency_calling_enabled,
            'Secure': secure,
            'ByocTrunkSid': byoc_trunk_sid,
            'EmergencyCallerSid': emergency_caller_sid,
        })

        payload = self._version.create(method='POST', uri=self._uri, data=data)
        return DomainInstance(self._version, payload, account_sid=self._solution['account_sid'])
    
    
    def stream(self, limit=None, page_size=None):
        """
        Streams DomainInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.api.v2010.account.sip.domain.DomainInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    def list(self, limit=None, page_size=None):
        """
        Lists DomainInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.api.v2010.account.sip.domain.DomainInstance]
        """
        return list(self.stream(
            limit=limit,
            page_size=page_size,
        ))

    def page(self, page_token=values.unset, page_number=values.unset, page_size=values.unset):
        """
        Retrieve a single page of DomainInstance records from the API.
        Request is executed immediately
        
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of DomainInstance
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainPage
        """
        data = values.of({ 
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data)
        return DomainPage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of DomainInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of DomainInstance
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url
        )
        return DomainPage(self._version, response, self._solution)


    def get(self, sid):
        """
        Constructs a DomainContext
        
        :param sid: The Twilio-provided string that uniquely identifies the SipDomain resource to update.
        
        :returns: twilio.rest.api.v2010.account.sip.domain.DomainContext
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainContext
        """
        return DomainContext(self._version, account_sid=self._solution['account_sid'], sid=sid)

    def __call__(self, sid):
        """
        Constructs a DomainContext
        
        :param sid: The Twilio-provided string that uniquely identifies the SipDomain resource to update.
        
        :returns: twilio.rest.api.v2010.account.sip.domain.DomainContext
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainContext
        """
        return DomainContext(self._version, account_sid=self._solution['account_sid'], sid=sid)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.DomainList>'










class DomainPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the DomainPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.api.v2010.account.sip.domain.DomainPage
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainPage
        """
        super().__init__(version, response)

        # Path solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of DomainInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.api.v2010.account.sip.domain.DomainInstance
        :rtype: twilio.rest.api.v2010.account.sip.domain.DomainInstance
        """
        return DomainInstance(self._version, payload, account_sid=self._solution['account_sid'])

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.DomainPage>'





class DomainContext(InstanceContext):
    def __init__(self, version: Version, account_sid: str, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'account_sid': account_sid, 'sid': sid,  }
        self._uri = '/Accounts/${account_sid}/SIP/Domains/${sid}.json'
        
        self._auth = None
        self._credential_list_mappings = None
        self._ip_access_control_list_mappings = None
    
    def delete(self):
        
        

        """
        Deletes the DomainInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )
    
    def fetch(self):
        
        """
        Fetch the DomainInstance

        :returns: The fetched DomainInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return DomainInstance(self._version, payload, account_sid=self._solution['account_sid'], sid=self._solution['sid'], )
        

        
    
    def update(self, friendly_name, voice_fallback_method, voice_fallback_url, voice_method, voice_status_callback_method, voice_status_callback_url, voice_url, sip_registration, domain_name, emergency_calling_enabled, secure, byoc_trunk_sid, emergency_caller_sid):
        data = values.of({
            'friendly_name': friendly_name,'voice_fallback_method': voice_fallback_method,'voice_fallback_url': voice_fallback_url,'voice_method': voice_method,'voice_status_callback_method': voice_status_callback_method,'voice_status_callback_url': voice_status_callback_url,'voice_url': voice_url,'sip_registration': sip_registration,'domain_name': domain_name,'emergency_calling_enabled': emergency_calling_enabled,'secure': secure,'byoc_trunk_sid': byoc_trunk_sid,'emergency_caller_sid': emergency_caller_sid,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return DomainInstance(self._version, payload, account_sid=self._solution['account_sid'], sid=self._solution['sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.DomainContext>'



class DomainInstance(InstanceResource):
    def __init__(self, version, payload, account_sid: str, sid: str):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'api_version' : payload.get('api_version'),
            'auth_type' : payload.get('auth_type'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'domain_name' : payload.get('domain_name'),
            'friendly_name' : payload.get('friendly_name'),
            'sid' : payload.get('sid'),
            'uri' : payload.get('uri'),
            'voice_fallback_method' : payload.get('voice_fallback_method'),
            'voice_fallback_url' : payload.get('voice_fallback_url'),
            'voice_method' : payload.get('voice_method'),
            'voice_status_callback_method' : payload.get('voice_status_callback_method'),
            'voice_status_callback_url' : payload.get('voice_status_callback_url'),
            'voice_url' : payload.get('voice_url'),
            'subresource_uris' : payload.get('subresource_uris'),
            'sip_registration' : payload.get('sip_registration'),
            'emergency_calling_enabled' : payload.get('emergency_calling_enabled'),
            'secure' : payload.get('secure'),
            'byoc_trunk_sid' : payload.get('byoc_trunk_sid'),
            'emergency_caller_sid' : payload.get('emergency_caller_sid'),
        }

        self._context = None
        self._solution = {
            'account_sid': account_sid or self._properties['account_sid'],'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = DomainContext(
                self._version,
                account_sid=self._solution['account_sid'],sid=self._solution['sid'],
            )
        return self._context

    @property
    def auth(self):
        return self._proxy.auth
    @property
    def credential_list_mappings(self):
        return self._proxy.credential_list_mappings
    @property
    def ip_access_control_list_mappings(self):
        return self._proxy.ip_access_control_list_mappings
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V2010.DomainInstance {}>'.format(context)



