"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Api
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.api.v2010.account.addresses import AddressList
from twilio.rest.api.v2010.account.applications import ApplicationList
from twilio.rest.api.v2010.account.authorized_connect_apps import AuthorizedConnectAppList
from twilio.rest.api.v2010.account.available_phone_numbers import AvailablePhoneNumberCountryList
from twilio.rest.api.v2010.account.balance import BalanceList
from twilio.rest.api.v2010.account.calls import CallList
from twilio.rest.api.v2010.account.conferences import ConferenceList
from twilio.rest.api.v2010.account.connect_apps import ConnectAppList
from twilio.rest.api.v2010.account.incoming_phone_numbers import IncomingPhoneNumberList
from twilio.rest.api.v2010.account.keys import KeyList
from twilio.rest.api.v2010.account.messages import MessageList
from twilio.rest.api.v2010.account.new_keys import NewKeyList
from twilio.rest.api.v2010.account.new_signing_keys import NewSigningKeyList
from twilio.rest.api.v2010.account.notifications import NotificationList
from twilio.rest.api.v2010.account.outgoing_caller_ids import OutgoingCallerIdList
from twilio.rest.api.v2010.account.queues import QueueList
from twilio.rest.api.v2010.account.recordings import RecordingList
from twilio.rest.api.v2010.account.short_codes import ShortCodeList
from twilio.rest.api.v2010.account.signing_keys import SigningKeyList
from twilio.rest.api.v2010.account.sip import SipList
from twilio.rest.api.v2010.account.tokens import TokenList
from twilio.rest.api.v2010.account.transcriptions import TranscriptionList
from twilio.rest.api.v2010.account.usage import UsageList
from twilio.rest.api.v2010.account.validation_requests import ValidationRequestList


class AccountList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the AccountList
        :param Version version: Version that contains the resource
        
        :returns: twilio.api.v2010.account..AccountList
        :rtype: twilio.api.v2010.account..AccountList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Accounts.json'.format(**self._solution)


    
    
    
    
    def stream(self, friendly_name=values.unset, status=values.unset, limit=None, page_size=None):
        """
        Streams AccountInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param str friendly_name: Only return the Account resources with friendly names that exactly match this name.
        :param AccountStatus status: Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.api.v2010.account.AccountInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            friendly_name=friendly_name,
            status=status,
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    def list(self, friendly_name=values.unset, status=values.unset, limit=None, page_size=None):
        """
        Lists AccountInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param str friendly_name: Only return the Account resources with friendly names that exactly match this name.
        :param AccountStatus status: Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.api.v2010.account.AccountInstance]
        """
        return list(self.stream(
            friendly_name=friendly_name,
            status=status,
            limit=limit,
            page_size=page_size,
        ))

    def page(self, friendly_name=values.unset, status=values.unset, page_token=values.unset, page_number=values.unset, page_size=values.unset):
        """
        Retrieve a single page of AccountInstance records from the API.
        Request is executed immediately
        
        :param str friendly_name: Only return the Account resources with friendly names that exactly match this name.
        :param AccountStatus status: Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of AccountInstance
        :rtype: twilio.rest.api.v2010.account.AccountPage
        """
        data = values.of({ 
            'FriendlyName': friendly_name,
            'Status': status,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data)
        return AccountPage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of AccountInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of AccountInstance
        :rtype: twilio.rest.api.v2010.account.AccountPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url
        )
        return AccountPage(self._version, response, self._solution)


    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.AccountList>'








class AccountPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the AccountPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.api.v2010.account.AccountPage
        :rtype: twilio.rest.api.v2010.account.AccountPage
        """
        super().__init__(version, response)

        # Path solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of AccountInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.api.v2010.account.AccountInstance
        :rtype: twilio.rest.api.v2010.account.AccountInstance
        """
        return AccountInstance(self._version, payload)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.AccountPage>'





class AccountContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'sid': sid,  }
        self._uri = '/Accounts/${sid}.json'
        
        self._addresses = None
        self._applications = None
        self._authorized_connect_apps = None
        self._available_phone_numbers = None
        self._balance = None
        self._calls = None
        self._conferences = None
        self._connect_apps = None
        self._incoming_phone_numbers = None
        self._keys = None
        self._messages = None
        self._new_keys = None
        self._new_signing_keys = None
        self._notifications = None
        self._outgoing_caller_ids = None
        self._queues = None
        self._recordings = None
        self._short_codes = None
        self._signing_keys = None
        self._sip = None
        self._tokens = None
        self._transcriptions = None
        self._usage = None
        self._validation_requests = None
    
    def fetch(self):
        
        """
        Fetch the AccountInstance

        :returns: The fetched AccountInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return AccountInstance(self._version, payload, sid=self._solution['sid'], )
        

        
    
    def update(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return AccountInstance(self._version, payload, sid=self._solution['sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.AccountContext>'



class AccountInstance(InstanceResource):
    def __init__(self, version, payload, sid: str):
        super().__init__(version)
        self._properties = { 
            'auth_token' : payload.get('auth_token'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'friendly_name' : payload.get('friendly_name'),
            'owner_account_sid' : payload.get('owner_account_sid'),
            'sid' : payload.get('sid'),
            'status' : payload.get('status'),
            'subresource_uris' : payload.get('subresource_uris'),
            'type' : payload.get('type'),
            'uri' : payload.get('uri'),
        }

        self._context = None
        self._solution = {
            'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = AccountContext(
                self._version,
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def addresses(self):
        return self._proxy.addresses
    @property
    def applications(self):
        return self._proxy.applications
    @property
    def authorized_connect_apps(self):
        return self._proxy.authorized_connect_apps
    @property
    def available_phone_numbers(self):
        return self._proxy.available_phone_numbers
    @property
    def balance(self):
        return self._proxy.balance
    @property
    def calls(self):
        return self._proxy.calls
    @property
    def conferences(self):
        return self._proxy.conferences
    @property
    def connect_apps(self):
        return self._proxy.connect_apps
    @property
    def incoming_phone_numbers(self):
        return self._proxy.incoming_phone_numbers
    @property
    def keys(self):
        return self._proxy.keys
    @property
    def messages(self):
        return self._proxy.messages
    @property
    def new_keys(self):
        return self._proxy.new_keys
    @property
    def new_signing_keys(self):
        return self._proxy.new_signing_keys
    @property
    def notifications(self):
        return self._proxy.notifications
    @property
    def outgoing_caller_ids(self):
        return self._proxy.outgoing_caller_ids
    @property
    def queues(self):
        return self._proxy.queues
    @property
    def recordings(self):
        return self._proxy.recordings
    @property
    def short_codes(self):
        return self._proxy.short_codes
    @property
    def signing_keys(self):
        return self._proxy.signing_keys
    @property
    def sip(self):
        return self._proxy.sip
    @property
    def tokens(self):
        return self._proxy.tokens
    @property
    def transcriptions(self):
        return self._proxy.transcriptions
    @property
    def usage(self):
        return self._proxy.usage
    @property
    def validation_requests(self):
        return self._proxy.validation_requests
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V2010.AccountInstance {}>'.format(context)



