r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Api
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import date, datetime
from typing import List, Optional
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class FeedbackSummaryInstance(InstanceResource):
    class Status(object):
        QUEUED = "queued"
        IN_PROGRESS = "in-progress"
        COMPLETED = "completed"
        FAILED = "failed"

    def __init__(self, version, payload, account_sid: str, sid: Optional[str] = None):
        """
        Initialize the FeedbackSummaryInstance
        """
        super().__init__(version)

        self._account_sid: Optional[str] = payload.get("account_sid")
        self._call_count: Optional[int] = deserialize.integer(payload.get("call_count"))
        self._call_feedback_count: Optional[int] = deserialize.integer(
            payload.get("call_feedback_count")
        )
        self._date_created: Optional[datetime] = deserialize.rfc2822_datetime(
            payload.get("date_created")
        )
        self._date_updated: Optional[datetime] = deserialize.rfc2822_datetime(
            payload.get("date_updated")
        )
        self._end_date: Optional[date] = deserialize.iso8601_date(
            payload.get("end_date")
        )
        self._include_subaccounts: Optional[bool] = payload.get("include_subaccounts")
        self._issues: Optional[List[object]] = payload.get("issues")
        self._quality_score_average: Optional[float] = deserialize.decimal(
            payload.get("quality_score_average")
        )
        self._quality_score_median: Optional[float] = deserialize.decimal(
            payload.get("quality_score_median")
        )
        self._quality_score_standard_deviation: Optional[float] = deserialize.decimal(
            payload.get("quality_score_standard_deviation")
        )
        self._sid: Optional[str] = payload.get("sid")
        self._start_date: Optional[date] = deserialize.iso8601_date(
            payload.get("start_date")
        )
        self._status: Optional["FeedbackSummaryInstance.Status"] = payload.get("status")

        self._solution = {
            "account_sid": account_sid,
            "sid": sid or self._sid,
        }
        self._context: Optional[FeedbackSummaryContext] = None

    @property
    def _proxy(self) -> "FeedbackSummaryContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: FeedbackSummaryContext for this FeedbackSummaryInstance
        """
        if self._context is None:
            self._context = FeedbackSummaryContext(
                self._version,
                account_sid=self._solution["account_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def account_sid(self) -> Optional[str]:
        """
        :returns: The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
        """
        return self._account_sid

    @property
    def call_count(self) -> Optional[int]:
        """
        :returns: The total number of calls.
        """
        return self._call_count

    @property
    def call_feedback_count(self) -> Optional[int]:
        """
        :returns: The total number of calls with a feedback entry.
        """
        return self._call_feedback_count

    @property
    def date_created(self) -> Optional[datetime]:
        """
        :returns: The date that this resource was created, given in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
        """
        return self._date_created

    @property
    def date_updated(self) -> Optional[datetime]:
        """
        :returns: The date that this resource was last updated, given in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
        """
        return self._date_updated

    @property
    def end_date(self) -> Optional[date]:
        """
        :returns: The last date for which feedback entries are included in this Feedback Summary, formatted as `YYYY-MM-DD` and specified in UTC.
        """
        return self._end_date

    @property
    def include_subaccounts(self) -> Optional[bool]:
        """
        :returns: Whether the feedback summary includes subaccounts; `true` if it does, otherwise `false`.
        """
        return self._include_subaccounts

    @property
    def issues(self) -> Optional[List[object]]:
        """
        :returns: A list of issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, or `one-way-audio`.
        """
        return self._issues

    @property
    def quality_score_average(self) -> Optional[float]:
        """
        :returns: The average QualityScore of the feedback entries.
        """
        return self._quality_score_average

    @property
    def quality_score_median(self) -> Optional[float]:
        """
        :returns: The median QualityScore of the feedback entries.
        """
        return self._quality_score_median

    @property
    def quality_score_standard_deviation(self) -> Optional[float]:
        """
        :returns: The standard deviation of the quality scores.
        """
        return self._quality_score_standard_deviation

    @property
    def sid(self) -> Optional[str]:
        """
        :returns: A 34 character string that uniquely identifies this resource.
        """
        return self._sid

    @property
    def start_date(self) -> Optional[date]:
        """
        :returns: The first date for which feedback entries are included in this feedback summary, formatted as `YYYY-MM-DD` and specified in UTC.
        """
        return self._start_date

    @property
    def status(self) -> Optional["FeedbackSummaryInstance.Status"]:
        return self._status

    def delete(self) -> bool:
        """
        Deletes the FeedbackSummaryInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete()

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the FeedbackSummaryInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async()

    def fetch(self) -> "FeedbackSummaryInstance":
        """
        Fetch the FeedbackSummaryInstance


        :returns: The fetched FeedbackSummaryInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "FeedbackSummaryInstance":
        """
        Asynchronous coroutine to fetch the FeedbackSummaryInstance


        :returns: The fetched FeedbackSummaryInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.FeedbackSummaryInstance {}>".format(context)


class FeedbackSummaryContext(InstanceContext):
    def __init__(self, version: Version, account_sid: str, sid: str):
        """
        Initialize the FeedbackSummaryContext

        :param version: Version that contains the resource
        :param account_sid: The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
        :param sid: A 34 character string that uniquely identifies this resource.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
            "sid": sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/FeedbackSummary/{sid}.json".format(
            **self._solution
        )

    def delete(self) -> bool:
        """
        Deletes the FeedbackSummaryInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the FeedbackSummaryInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def fetch(self) -> FeedbackSummaryInstance:
        """
        Fetch the FeedbackSummaryInstance


        :returns: The fetched FeedbackSummaryInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return FeedbackSummaryInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> FeedbackSummaryInstance:
        """
        Asynchronous coroutine to fetch the FeedbackSummaryInstance


        :returns: The fetched FeedbackSummaryInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return FeedbackSummaryInstance(
            self._version,
            payload,
            account_sid=self._solution["account_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Api.V2010.FeedbackSummaryContext {}>".format(context)


class FeedbackSummaryList(ListResource):
    def __init__(self, version: Version, account_sid: str):
        """
        Initialize the FeedbackSummaryList

        :param version: Version that contains the resource
        :param account_sid: The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "account_sid": account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/FeedbackSummary.json".format(
            **self._solution
        )

    def create(
        self,
        start_date,
        end_date,
        include_subaccounts=values.unset,
        status_callback=values.unset,
        status_callback_method=values.unset,
    ) -> FeedbackSummaryInstance:
        """
        Create the FeedbackSummaryInstance

        :param date start_date: Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
        :param date end_date: Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
        :param bool include_subaccounts: Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
        :param str status_callback: The URL that we will request when the feedback summary is complete.
        :param str status_callback_method: The HTTP method (`GET` or `POST`) we use to make the request to the `StatusCallback` URL.

        :returns: The created FeedbackSummaryInstance
        """
        data = values.of(
            {
                "StartDate": serialize.iso8601_date(start_date),
                "EndDate": serialize.iso8601_date(end_date),
                "IncludeSubaccounts": include_subaccounts,
                "StatusCallback": status_callback,
                "StatusCallbackMethod": status_callback_method,
            }
        )

        payload = self._version.create(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return FeedbackSummaryInstance(
            self._version, payload, account_sid=self._solution["account_sid"]
        )

    async def create_async(
        self,
        start_date,
        end_date,
        include_subaccounts=values.unset,
        status_callback=values.unset,
        status_callback_method=values.unset,
    ) -> FeedbackSummaryInstance:
        """
        Asynchronously create the FeedbackSummaryInstance

        :param date start_date: Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
        :param date end_date: Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
        :param bool include_subaccounts: Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
        :param str status_callback: The URL that we will request when the feedback summary is complete.
        :param str status_callback_method: The HTTP method (`GET` or `POST`) we use to make the request to the `StatusCallback` URL.

        :returns: The created FeedbackSummaryInstance
        """
        data = values.of(
            {
                "StartDate": serialize.iso8601_date(start_date),
                "EndDate": serialize.iso8601_date(end_date),
                "IncludeSubaccounts": include_subaccounts,
                "StatusCallback": status_callback,
                "StatusCallbackMethod": status_callback_method,
            }
        )

        payload = await self._version.create_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return FeedbackSummaryInstance(
            self._version, payload, account_sid=self._solution["account_sid"]
        )

    def get(self, sid) -> FeedbackSummaryContext:
        """
        Constructs a FeedbackSummaryContext

        :param sid: A 34 character string that uniquely identifies this resource.
        """
        return FeedbackSummaryContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __call__(self, sid) -> FeedbackSummaryContext:
        """
        Constructs a FeedbackSummaryContext

        :param sid: A 34 character string that uniquely identifies this resource.
        """
        return FeedbackSummaryContext(
            self._version, account_sid=self._solution["account_sid"], sid=sid
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Api.V2010.FeedbackSummaryList>"
