"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Api
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.base.page import Page

# 


class ParticipantContext(InstanceContext):
    def __init__(self, version: Version, account_sid: str, conference_sid: str, call_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'account_sid': account_sid, 'conference_sid': conference_sid, 'call_sid': call_sid,  }
        self._uri = '/Accounts/${account_sid}/Conferences/${conference_sid}/Participants/${call_sid}.json'
        
    
    def delete(self):
        
        

        """
        Deletes the ParticipantInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )
    
    def fetch(self):
        
        """
        Fetch the ParticipantInstance

        :returns: The fetched ParticipantInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ParticipantInstance(self._version, payload, account_sid=self._solution['account_sid'], conference_sid=self._solution['conference_sid'], call_sid=self._solution['call_sid'], )
        

        
    
    def update(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return ParticipantInstance(self._version, payload, account_sid=self._solution['account_sid'], conference_sid=self._solution['conference_sid'], call_sid=self._solution['call_sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.ParticipantContext>'



class ParticipantInstance(InstanceResource):
    def __init__(self, version, payload, account_sid: str, conference_sid: str, call_sid: str):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'call_sid' : payload.get('call_sid'),
            'label' : payload.get('label'),
            'call_sid_to_coach' : payload.get('call_sid_to_coach'),
            'coaching' : payload.get('coaching'),
            'conference_sid' : payload.get('conference_sid'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'end_conference_on_exit' : payload.get('end_conference_on_exit'),
            'muted' : payload.get('muted'),
            'hold' : payload.get('hold'),
            'start_conference_on_enter' : payload.get('start_conference_on_enter'),
            'status' : payload.get('status'),
            'uri' : payload.get('uri'),
        }

        self._context = None
        self._solution = {
            'account_sid': account_sid or self._properties['account_sid'],'conference_sid': conference_sid or self._properties['conference_sid'],'call_sid': call_sid or self._properties['call_sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = ParticipantContext(
                self._version,
                account_sid=self._solution['account_sid'],conference_sid=self._solution['conference_sid'],call_sid=self._solution['call_sid'],
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V2010.ParticipantInstance {}>'.format(context)



class ParticipantList(ListResource):
    def __init__(self, version: Version, account_sid: str, conference_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'account_sid': account_sid, 'conference_sid': conference_sid,  }
        self._uri = '/Accounts/${account_sid}/Conferences/${conference_sid}/Participants.json'
        

    """
    def create(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.create(method='post', uri=self._uri, data=data, )

        return ParticipantInstance(self._version, payload, account_sid=self._solution['account_sid']conference_sid=self._solution['conference_sid'])
        
    """

    """
    def page(self, muted, hold, coaching, page_size):
        
        data = values.of({
            'muted': muted,'hold': hold,'coaching': coaching,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return ParticipantPage(self._version, payload, account_sid=self._solution['account_sid'], conference_sid=self._solution['conference_sid'], )
    """


    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.ParticipantList>'

