"""
    This code was generated by
    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Wireless
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource

from twilio.base.page import Page

from twilio.rest.sim.data_session import DataSessionListInstancefrom twilio.rest.sim.usage_record import UsageRecordListInstance


class SimContext(InstanceContext):
    def __init__(self, version: V1, sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'sid': sid,  }
        self._uri = '/Sims/${sid}'
        
        self._data_sessions = None
        self._usage_records = None
    
    def delete(self):
        
        
        """
        Deletes the SimInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )
    
    def fetch(self):
        
        """
        Fetch the SimInstance

        :returns: The fetched SimInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )
        return SimInstance(
            self._version,
            payload,
            sid=self._solution['sid'],
        )
        
        
    
    def update(self, body):
        data = values.of({
            'body': body,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return SimInstance(self._version, payload, sid=self._solution['sid'], )
        
        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.SimContext>'



class SimInstance(InstanceResource):
    def __init__(self, version, payload, sid: str):
        super().__init__(version)
        self._properties = { 
            'sid' : payload.get('sid'),
            'unique_name' : payload.get('unique_name'),
            'account_sid' : payload.get('account_sid'),
            'rate_plan_sid' : payload.get('rate_plan_sid'),
            'friendly_name' : payload.get('friendly_name'),
            'iccid' : payload.get('iccid'),
            'e_id' : payload.get('e_id'),
            'status' : payload.get('status'),
            'reset_status' : payload.get('reset_status'),
            'commands_callback_url' : payload.get('commands_callback_url'),
            'commands_callback_method' : payload.get('commands_callback_method'),
            'sms_fallback_method' : payload.get('sms_fallback_method'),
            'sms_fallback_url' : payload.get('sms_fallback_url'),
            'sms_method' : payload.get('sms_method'),
            'sms_url' : payload.get('sms_url'),
            'voice_fallback_method' : payload.get('voice_fallback_method'),
            'voice_fallback_url' : payload.get('voice_fallback_url'),
            'voice_method' : payload.get('voice_method'),
            'voice_url' : payload.get('voice_url'),
            'date_created' : payload.get('date_created'),
            'date_updated' : payload.get('date_updated'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
            'ip_address' : payload.get('ip_address'),
        }

        self._context = None
        self._solution = {
            'sid': sid or self._properties['sid']
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = SimContext(
                self._version,
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def data_sessions(self):
        return self._proxy.data_sessions
    @property
    def usage_records(self):
        return self._proxy.usage_records
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Api.V1.SimInstance {}>'.format(context)



class SimListInstance(ListResource):
    def __init__(self, version: V1):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Sims'
        
    
    def page(self, status, iccid, rate_plan, eid, sim_registration_code, page_size):
        
        data = values.of({
            'status': status,'iccid': iccid,'rate_plan': rate_plan,'eid': eid,'sim_registration_code': sim_registration_code,'page_size': page_size,
        })

        payload = self._version.create(method='get', uri=self._uri, data=data, )

        return SimPage(self._version, payload, )
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V1.SimListInstance>'

