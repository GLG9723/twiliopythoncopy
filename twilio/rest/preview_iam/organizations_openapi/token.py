r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Organization Public API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import date, datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from twilio.base import deserialize, serialize, values

from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version



class TokenInstance(InstanceResource):

    """
    :ivar access_token: Token which carries the necessary information to access a Twilio resource directly.
    :ivar refresh_token: Token which carries the information necessary to get a new access token.
    :ivar id_token: Token which carries the information necessary of user profile.
    :ivar token_type: Token type
    :ivar expires_in: 
    """

    def __init__(self, version: Version, payload: Dict[str, Any]):
        super().__init__(version)

        
        self.access_token: Optional[str] = payload.get("access_token")
        self.refresh_token: Optional[str] = payload.get("refresh_token")
        self.id_token: Optional[str] = payload.get("id_token")
        self.token_type: Optional[str] = payload.get("token_type")
        self.expires_in: Optional[int] = payload.get("expires_in")

        
        
    
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        
        return '<Twilio.PreviewIam.Organizations_openapi.TokenInstance>'




class TokenList(ListResource):
    
    def __init__(self, version: Version):
        """
        Initialize the TokenList

        :param version: Version that contains the resource
        
        """
        super().__init__(version)

        
        self._uri = '/token'
        
        
    
    def create(self, grant_type: str, client_id: str, client_secret: Union[str, object]=values.unset, code: Union[str, object]=values.unset, redirect_uri: Union[str, object]=values.unset, audience: Union[str, object]=values.unset, refresh_token: Union[str, object]=values.unset, scope: Union[str, object]=values.unset) -> TokenInstance:
        """
        Create the TokenInstance

        :param grant_type: Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token.
        :param client_id: A 34 character string that uniquely identifies this OAuth App.
        :param client_secret: The credential for confidential OAuth App.
        :param code: JWT token related to the authorization code grant type.
        :param redirect_uri: The redirect uri
        :param audience: The targeted audience uri
        :param refresh_token: JWT token related to refresh access token.
        :param scope: The scope of token
        
        :returns: The created TokenInstance
        """
        
        data = values.of({ 
            'grant_type': grant_type,
            'client_id': client_id,
            'client_secret': client_secret,
            'code': code,
            'redirect_uri': redirect_uri,
            'audience': audience,
            'refresh_token': refresh_token,
            'scope': scope,
        })
        
        
        
        payload = self._version.create(method='POST', uri=self._uri, data=data,)

        return TokenInstance(self._version, payload)

    async def create_async(self, grant_type: str, client_id: str, client_secret: Union[str, object]=values.unset, code: Union[str, object]=values.unset, redirect_uri: Union[str, object]=values.unset, audience: Union[str, object]=values.unset, refresh_token: Union[str, object]=values.unset, scope: Union[str, object]=values.unset) -> TokenInstance:
        """
        Asynchronously create the TokenInstance

        :param grant_type: Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token.
        :param client_id: A 34 character string that uniquely identifies this OAuth App.
        :param client_secret: The credential for confidential OAuth App.
        :param code: JWT token related to the authorization code grant type.
        :param redirect_uri: The redirect uri
        :param audience: The targeted audience uri
        :param refresh_token: JWT token related to refresh access token.
        :param scope: The scope of token
        
        :returns: The created TokenInstance
        """
        
        data = values.of({ 
            'grant_type': grant_type,
            'client_id': client_id,
            'client_secret': client_secret,
            'code': code,
            'redirect_uri': redirect_uri,
            'audience': audience,
            'refresh_token': refresh_token,
            'scope': scope,
        })
        
        
        
        payload = await self._version.create_async(method='POST', uri=self._uri, data=data,)

        return TokenInstance(self._version, payload)
    
    
    def stream(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[TokenInstance]:
        """
        Streams TokenInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    async def stream_async(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[TokenInstance]:
        """
        Asynchronously streams TokenInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            page_size=limits['page_size']
        )

        return self._version.stream_async(page, limits['limit'])

    def list(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[TokenInstance]:
        """
        Lists TokenInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(self.stream(
            limit=limit,
            page_size=page_size,
        ))

    async def list_async(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[TokenInstance]:
        """
        Asynchronously lists TokenInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [record async for record in await self.stream_async(
            limit=limit,
            page_size=page_size,
        )]

    # def page(self,
    #     page_token: Union[str, object] = values.unset,
    #     page_number: Union[int, object] = values.unset,
    #     page_size: Union[int, object] = values.unset,
    # ) -> TokenPage:
    #     """
    #     Retrieve a single page of TokenInstance records from the API.
    #     Request is executed immediately
    #
    #     :param page_token: PageToken provided by the API
    #     :param page_number: Page Number, this value is simply for client state
    #     :param page_size: Number of records to return, defaults to 50
    #
    #     :returns: Page of TokenInstance
    #     """
    #     data = values.of({
    #         'PageToken': page_token,
    #         'Page': page_number,
    #         'PageSize': page_size,
    #     })
    #
    #     response = self._version.page(method='GET', uri=self._uri, params=data)
    #     return TokenPage(self._version, response)

    # async def page_async(self,
    #     page_token: Union[str, object] = values.unset,
    #     page_number: Union[int, object] = values.unset,
    #     page_size: Union[int, object] = values.unset,
    # ) -> TokenPage:
    #     """
    #     Asynchronously retrieve a single page of TokenInstance records from the API.
    #     Request is executed immediately
    #
    #     :param page_token: PageToken provided by the API
    #     :param page_number: Page Number, this value is simply for client state
    #     :param page_size: Number of records to return, defaults to 50
    #
    #     :returns: Page of TokenInstance
    #     """
    #     data = values.of({
    #         'PageToken': page_token,
    #         'Page': page_number,
    #         'PageSize': page_size,
    #     })
    #
    #     response = await self._version.page_async(method='GET', uri=self._uri, params=data)
    #     return TokenPage(self._version, response)

    # def get_page(self, target_url: str) -> TokenPage:
    #     """
    #     Retrieve a specific page of TokenInstance records from the API.
    #     Request is executed immediately
    #
    #     :param target_url: API-generated URL for the requested results page
    #
    #     :returns: Page of TokenInstance
    #     """
    #     response = self._version.domain.twilio.request(
    #         'GET',
    #         target_url
    #     )
    #     return TokenPage(self._version, response)

    # async def get_page_async(self, target_url: str) -> TokenPage:
    #     """
    #     Asynchronously retrieve a specific page of TokenInstance records from the API.
    #     Request is executed immediately
    #
    #     :param target_url: API-generated URL for the requested results page
    #
    #     :returns: Page of TokenInstance
    #     """
    #     response = await self._version.domain.twilio.request_async(
    #         'GET',
    #         target_url
    #     )
    #     return TokenPage(self._version, response)




    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return '<Twilio.PreviewIam.Organizations_openapi.TokenList>'

