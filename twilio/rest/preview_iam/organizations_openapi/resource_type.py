r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Organization Public API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import date, datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from twilio.base import deserialize, serialize, values

from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


class ResourceTypeInstance(InstanceResource):

    """
    :ivar name: Name of the resource type
    :ivar description: Description of the resource type
    :ivar endpoint: HTTP-addressable endpoint relative to the Base URL of the service provider
    :ivar schema: Primary/base schema URI
    """

    def __init__(self, version: Version, payload: Dict[str, Any], organization_sid: Optional[str] = None):
        super().__init__(version)

        
        self.name: Optional[str] = payload.get("name")
        self.description: Optional[str] = payload.get("description")
        self.endpoint: Optional[str] = payload.get("endpoint")
        self.schema: Optional[str] = payload.get("schema")

        
        self._solution = { 
            "organization_sid": organization_sid or self.organization_sid,
        }
        
    
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.PreviewIam.Organizations_openapi.ResourceTypeInstance {}>'.format(context)




class ResourceTypePage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> ResourceTypeInstance:
        """
        Build an instance of ResourceTypeInstance

        :param payload: Payload response from the API
        """
        return ResourceTypeInstance(self._version, payload, organization_sid=self._solution["organization_sid"])

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.PreviewIam.Organizations_openapi.ResourceTypePage>"





class ResourceTypeList(ListResource):
    
    def __init__(self, version: Version, organization_sid: str):
        """
        Initialize the ResourceTypeList

        :param version: Version that contains the resource
        :param organization_sid: 
        
        """
        super().__init__(version)

        
        # Path Solution
        self._solution = { 'organization_sid': organization_sid,  }
        self._uri = '/{organization_sid}/scim/ResourceTypes'.format(**self._solution)
        
        
    
    def stream(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[ResourceTypeInstance]:
        """
        Streams ResourceTypeInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    async def stream_async(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[ResourceTypeInstance]:
        """
        Asynchronously streams ResourceTypeInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            page_size=limits['page_size']
        )

        return self._version.stream_async(page, limits['limit'])

    def list(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[ResourceTypeInstance]:
        """
        Lists ResourceTypeInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(self.stream(
            limit=limit,
            page_size=page_size,
        ))

    async def list_async(self, 
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[ResourceTypeInstance]:
        """
        Asynchronously lists ResourceTypeInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [record async for record in await self.stream_async(
            limit=limit,
            page_size=page_size,
        )]

    def page(self, 
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> ResourceTypePage:
        """
        Retrieve a single page of ResourceTypeInstance records from the API.
        Request is executed immediately
        
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of ResourceTypeInstance
        """
        data = values.of({ 
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data)
        return ResourceTypePage(self._version, response, self._solution)

    async def page_async(self, 
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> ResourceTypePage:
        """
        Asynchronously retrieve a single page of ResourceTypeInstance records from the API.
        Request is executed immediately
        
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of ResourceTypeInstance
        """
        data = values.of({ 
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = await self._version.page_async(method='GET', uri=self._uri, params=data)
        return ResourceTypePage(self._version, response, self._solution)

    def get_page(self, target_url: str) -> ResourceTypePage:
        """
        Retrieve a specific page of ResourceTypeInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of ResourceTypeInstance
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url
        )
        return ResourceTypePage(self._version, response, self._solution)

    async def get_page_async(self, target_url: str) -> ResourceTypePage:
        """
        Asynchronously retrieve a specific page of ResourceTypeInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of ResourceTypeInstance
        """
        response = await self._version.domain.twilio.request_async(
            'GET',
            target_url
        )
        return ResourceTypePage(self._version, response, self._solution)




    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return '<Twilio.PreviewIam.Organizations_openapi.ResourceTypeList>'

