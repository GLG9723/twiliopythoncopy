r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Microvisor
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class AppManifestInstance(InstanceResource):
    def __init__(self, version, payload, app_sid: str):
        """
        Initialize the AppManifestInstance
        """
        super().__init__(version)

        self._properties = {
            "app_sid": payload.get("app_sid"),
            "hash": payload.get("hash"),
            "encoded_bytes": payload.get("encoded_bytes"),
            "url": payload.get("url"),
        }

        self._solution = {
            "app_sid": app_sid,
        }
        self._context: Optional[AppManifestContext] = None

    @property
    def _proxy(self) -> "AppManifestContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: AppManifestContext for this AppManifestInstance
        """
        if self._context is None:
            self._context = AppManifestContext(
                self._version,
                app_sid=self._solution["app_sid"],
            )
        return self._context

    @property
    def app_sid(self) -> str:
        """
        :returns: A 34-character string that uniquely identifies this App.
        """
        return self._properties["app_sid"]

    @property
    def hash(self) -> str:
        """
        :returns: App manifest hash represented as `hash_algorithm:hash_value`.
        """
        return self._properties["hash"]

    @property
    def encoded_bytes(self) -> str:
        """
        :returns: The base-64 encoded manifest
        """
        return self._properties["encoded_bytes"]

    @property
    def url(self) -> str:
        """
        :returns: The absolute URL of this Manifest.
        """
        return self._properties["url"]

    def fetch(self) -> "AppManifestInstance":
        """
        Fetch the AppManifestInstance


        :returns: The fetched AppManifestInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "AppManifestInstance":
        """
        Asynchronous coroutine to fetch the AppManifestInstance


        :returns: The fetched AppManifestInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Microvisor.V1.AppManifestInstance {}>".format(context)


class AppManifestContext(InstanceContext):
    def __init__(self, version: Version, app_sid: str):
        """
        Initialize the AppManifestContext

        :param version: Version that contains the resource
        :param app_sid: A 34-character string that uniquely identifies this App.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "app_sid": app_sid,
        }
        self._uri = "/Apps/{app_sid}/Manifest".format(**self._solution)

    def fetch(self) -> AppManifestInstance:
        """
        Fetch the AppManifestInstance


        :returns: The fetched AppManifestInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return AppManifestInstance(
            self._version,
            payload,
            app_sid=self._solution["app_sid"],
        )

    async def fetch_async(self) -> AppManifestInstance:
        """
        Asynchronous coroutine to fetch the AppManifestInstance


        :returns: The fetched AppManifestInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return AppManifestInstance(
            self._version,
            payload,
            app_sid=self._solution["app_sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Microvisor.V1.AppManifestContext {}>".format(context)


class AppManifestList(ListResource):
    def __init__(self, version: Version, app_sid: str):
        """
        Initialize the AppManifestList

        :param version: Version that contains the resource
        :param app_sid: A 34-character string that uniquely identifies this App.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "app_sid": app_sid,
        }

    def get(self) -> AppManifestContext:
        """
        Constructs a AppManifestContext

        """
        return AppManifestContext(self._version, app_sid=self._solution["app_sid"])

    def __call__(self) -> AppManifestContext:
        """
        Constructs a AppManifestContext

        """
        return AppManifestContext(self._version, app_sid=self._solution["app_sid"])

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Microvisor.V1.AppManifestList>"
