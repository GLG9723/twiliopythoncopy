"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Conversations
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.conversations.v1.configuration.webhooks import WebhookList


class ConfigurationList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the ConfigurationList

        :param Version version: Version that contains the resource
        
        :returns: twilio.rest.conversations.v1.configuration.ConfigurationList
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        
        
        self._webhooks = None
        
    
    

    @property
    def webhooks(self):
        """
        Access the webhooks

        :returns: twilio.rest.conversations.v1.configuration.WebhookList
        :rtype: twilio.rest.conversations.v1.configuration.WebhookList
        """
        if self._webhooks is None:
            self._webhooks = WebhookList(self._version)
        return self.webhooks

    def get(self):
        """
        Constructs a ConfigurationContext
        
        :returns: twilio.rest.conversations.v1.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationContext
        """
        return ConfigurationContext(self._version)

    def __call__(self):
        """
        Constructs a ConfigurationContext
        
        :returns: twilio.rest.conversations.v1.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationContext
        """
        return ConfigurationContext(self._version)

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ConfigurationList>'


class ConfigurationContext(InstanceContext):
    def __init__(self, version: Version):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = {  }
        self._uri = '/Configuration'
        
    
    def fetch(self):
        
        """
        Fetch the ConfigurationInstance

        :returns: The fetched ConfigurationInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ConfigurationInstance(self._version, payload, )
        

        
    
    def update(self, default_chat_service_sid, default_messaging_service_sid, default_inactive_timer, default_closed_timer):
        data = values.of({
            'default_chat_service_sid': default_chat_service_sid,'default_messaging_service_sid': default_messaging_service_sid,'default_inactive_timer': default_inactive_timer,'default_closed_timer': default_closed_timer,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return ConfigurationInstance(self._version, payload, )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ConfigurationContext>'



class ConfigurationInstance(InstanceResource):
    def __init__(self, version, payload):
        super().__init__(version)
        self._properties = { 
            'account_sid' : payload.get('account_sid'),
            'default_chat_service_sid' : payload.get('default_chat_service_sid'),
            'default_messaging_service_sid' : payload.get('default_messaging_service_sid'),
            'default_inactive_timer' : payload.get('default_inactive_timer'),
            'default_closed_timer' : payload.get('default_closed_timer'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
        }

        self._context = None
        self._solution = {
            
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = ConfigurationContext(
                self._version,
                
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Conversations.V1.ConfigurationInstance {}>'.format(context)



