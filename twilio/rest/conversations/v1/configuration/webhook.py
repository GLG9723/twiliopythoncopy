r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Conversations
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import List, Optional
from twilio.base import serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class WebhookInstance(InstanceResource):
    class Method(object):
        GET = "GET"
        POST = "POST"

    class Target(object):
        WEBHOOK = "webhook"
        FLEX = "flex"

    def __init__(self, version, payload):
        """
        Initialize the WebhookInstance
        """
        super().__init__(version)

        self._properties = {
            "account_sid": payload.get("account_sid"),
            "method": payload.get("method"),
            "filters": payload.get("filters"),
            "pre_webhook_url": payload.get("pre_webhook_url"),
            "post_webhook_url": payload.get("post_webhook_url"),
            "target": payload.get("target"),
            "url": payload.get("url"),
        }

        self._solution = {}
        self._context: Optional[WebhookContext] = None

    @property
    def _proxy(self) -> "WebhookContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: WebhookContext for this WebhookInstance
        """
        if self._context is None:
            self._context = WebhookContext(
                self._version,
            )
        return self._context

    @property
    def account_sid(self) -> str:
        """
        :returns: The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.
        """
        return self._properties["account_sid"]

    @property
    def method(self) -> "WebhookInstance.Method":
        """
        :returns:
        """
        return self._properties["method"]

    @property
    def filters(self) -> List[str]:
        """
        :returns: The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
        """
        return self._properties["filters"]

    @property
    def pre_webhook_url(self) -> str:
        """
        :returns: The absolute url the pre-event webhook request should be sent to.
        """
        return self._properties["pre_webhook_url"]

    @property
    def post_webhook_url(self) -> str:
        """
        :returns: The absolute url the post-event webhook request should be sent to.
        """
        return self._properties["post_webhook_url"]

    @property
    def target(self) -> "WebhookInstance.Target":
        """
        :returns:
        """
        return self._properties["target"]

    @property
    def url(self) -> str:
        """
        :returns: An absolute API resource API resource URL for this webhook.
        """
        return self._properties["url"]

    def fetch(self) -> "WebhookInstance":
        """
        Fetch the WebhookInstance


        :returns: The fetched WebhookInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "WebhookInstance":
        """
        Asynchronous coroutine to fetch the WebhookInstance


        :returns: The fetched WebhookInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        method=values.unset,
        filters=values.unset,
        pre_webhook_url=values.unset,
        post_webhook_url=values.unset,
        target=values.unset,
    ) -> "WebhookInstance":
        """
        Update the WebhookInstance

        :param str method: The HTTP method to be used when sending a webhook request.
        :param List[str] filters: The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
        :param str pre_webhook_url: The absolute url the pre-event webhook request should be sent to.
        :param str post_webhook_url: The absolute url the post-event webhook request should be sent to.
        :param "WebhookInstance.Target" target:

        :returns: The updated WebhookInstance
        """
        return self._proxy.update(
            method=method,
            filters=filters,
            pre_webhook_url=pre_webhook_url,
            post_webhook_url=post_webhook_url,
            target=target,
        )

    async def update_async(
        self,
        method=values.unset,
        filters=values.unset,
        pre_webhook_url=values.unset,
        post_webhook_url=values.unset,
        target=values.unset,
    ) -> "WebhookInstance":
        """
        Asynchronous coroutine to update the WebhookInstance

        :param str method: The HTTP method to be used when sending a webhook request.
        :param List[str] filters: The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
        :param str pre_webhook_url: The absolute url the pre-event webhook request should be sent to.
        :param str post_webhook_url: The absolute url the post-event webhook request should be sent to.
        :param "WebhookInstance.Target" target:

        :returns: The updated WebhookInstance
        """
        return await self._proxy.update_async(
            method=method,
            filters=filters,
            pre_webhook_url=pre_webhook_url,
            post_webhook_url=post_webhook_url,
            target=target,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Conversations.V1.WebhookInstance {}>".format(context)


class WebhookContext(InstanceContext):
    def __init__(self, version: Version):
        """
        Initialize the WebhookContext

        :param version: Version that contains the resource
        """
        super().__init__(version)

        self._uri = "/Configuration/Webhooks"

    def fetch(self) -> WebhookInstance:
        """
        Fetch the WebhookInstance


        :returns: The fetched WebhookInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return WebhookInstance(
            self._version,
            payload,
        )

    async def fetch_async(self) -> WebhookInstance:
        """
        Asynchronous coroutine to fetch the WebhookInstance


        :returns: The fetched WebhookInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return WebhookInstance(
            self._version,
            payload,
        )

    def update(
        self,
        method=values.unset,
        filters=values.unset,
        pre_webhook_url=values.unset,
        post_webhook_url=values.unset,
        target=values.unset,
    ) -> WebhookInstance:
        """
        Update the WebhookInstance

        :param str method: The HTTP method to be used when sending a webhook request.
        :param List[str] filters: The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
        :param str pre_webhook_url: The absolute url the pre-event webhook request should be sent to.
        :param str post_webhook_url: The absolute url the post-event webhook request should be sent to.
        :param "WebhookInstance.Target" target:

        :returns: The updated WebhookInstance
        """
        data = values.of(
            {
                "Method": method,
                "Filters": serialize.map(filters, lambda e: e),
                "PreWebhookUrl": pre_webhook_url,
                "PostWebhookUrl": post_webhook_url,
                "Target": target,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return WebhookInstance(self._version, payload)

    async def update_async(
        self,
        method=values.unset,
        filters=values.unset,
        pre_webhook_url=values.unset,
        post_webhook_url=values.unset,
        target=values.unset,
    ) -> WebhookInstance:
        """
        Asynchronous coroutine to update the WebhookInstance

        :param str method: The HTTP method to be used when sending a webhook request.
        :param List[str] filters: The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
        :param str pre_webhook_url: The absolute url the pre-event webhook request should be sent to.
        :param str post_webhook_url: The absolute url the post-event webhook request should be sent to.
        :param "WebhookInstance.Target" target:

        :returns: The updated WebhookInstance
        """
        data = values.of(
            {
                "Method": method,
                "Filters": serialize.map(filters, lambda e: e),
                "PreWebhookUrl": pre_webhook_url,
                "PostWebhookUrl": post_webhook_url,
                "Target": target,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return WebhookInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """

        return "<Twilio.Conversations.V1.WebhookContext>"


class WebhookList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the WebhookList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self) -> WebhookContext:
        """
        Constructs a WebhookContext

        """
        return WebhookContext(self._version)

    def __call__(self) -> WebhookContext:
        """
        Constructs a WebhookContext

        """
        return WebhookContext(self._version)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Conversations.V1.WebhookList>"
