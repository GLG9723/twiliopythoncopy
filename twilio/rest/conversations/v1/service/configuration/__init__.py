"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Conversations
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.conversations.v1.configuration.notifications import NotificationList
from twilio.rest.conversations.v1.configuration.webhooks import WebhookList


class ConfigurationList(ListResource):

    def __init__(self, version: Version, chat_service_sid: str):
        """
        Initialize the ConfigurationList

        :param Version version: Version that contains the resource
        :param chat_service_sid: The SID of the Service configuration resource to fetch.
        
        :returns: twilio.rest.conversations.v1.service.configuration.ConfigurationList
        :rtype: twilio.rest.conversations.v1.service.configuration.ConfigurationList
        """
        super().__init__(version)

        # Path Solution
        self._solution = { 'chat_service_sid': chat_service_sid,  }
        
        
        self._notifications = None
        self._webhooks = None
        
    
    

    @property
    def notifications(self):
        """
        Access the notifications

        :returns: twilio.rest.conversations.v1.service.configuration.NotificationList
        :rtype: twilio.rest.conversations.v1.service.configuration.NotificationList
        """
        if self._notifications is None:
            self._notifications = NotificationList(self._version, chat_service_sid=self._solution['chat_service_sid'])
        return self.notifications

    @property
    def webhooks(self):
        """
        Access the webhooks

        :returns: twilio.rest.conversations.v1.service.configuration.WebhookList
        :rtype: twilio.rest.conversations.v1.service.configuration.WebhookList
        """
        if self._webhooks is None:
            self._webhooks = WebhookList(self._version, chat_service_sid=self._solution['chat_service_sid'])
        return self.webhooks

    def get(self):
        """
        Constructs a ConfigurationContext
        
        :returns: twilio.rest.conversations.v1.service.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.service.configuration.ConfigurationContext
        """
        return ConfigurationContext(self._version, chat_service_sid=self._solution['chat_service_sid'])

    def __call__(self):
        """
        Constructs a ConfigurationContext
        
        :returns: twilio.rest.conversations.v1.service.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.service.configuration.ConfigurationContext
        """
        return ConfigurationContext(self._version, chat_service_sid=self._solution['chat_service_sid'])

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ConfigurationList>'


class ConfigurationContext(InstanceContext):
    def __init__(self, version: Version, chat_service_sid: str):
        # TODO: needs autogenerated docs
        super().__init__(version)

        # Path Solution
        self._solution = { 'chat_service_sid': chat_service_sid,  }
        self._uri = '/Services/${chat_service_sid}/Configuration'
        
    
    def fetch(self):
        
        """
        Fetch the ConfigurationInstance

        :returns: The fetched ConfigurationInstance
        #TODO: add rtype docs
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ConfigurationInstance(self._version, payload, chat_service_sid=self._solution['chat_service_sid'], )
        

        
    
    def update(self, default_conversation_creator_role_sid, default_conversation_role_sid, default_chat_service_role_sid, reachability_enabled):
        data = values.of({
            'default_conversation_creator_role_sid': default_conversation_creator_role_sid,'default_conversation_role_sid': default_conversation_role_sid,'default_chat_service_role_sid': default_chat_service_role_sid,'reachability_enabled': reachability_enabled,
        })

        payload = self._version.update(method='post', uri=self._uri, data=data, )

        return ConfigurationInstance(self._version, payload, chat_service_sid=self._solution['chat_service_sid'], )
        
        

        
    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ConfigurationContext>'



class ConfigurationInstance(InstanceResource):
    def __init__(self, version, payload, chat_service_sid: str):
        super().__init__(version)
        self._properties = { 
            'chat_service_sid' : payload.get('chat_service_sid'),
            'default_conversation_creator_role_sid' : payload.get('default_conversation_creator_role_sid'),
            'default_conversation_role_sid' : payload.get('default_conversation_role_sid'),
            'default_chat_service_role_sid' : payload.get('default_chat_service_role_sid'),
            'url' : payload.get('url'),
            'links' : payload.get('links'),
            'reachability_enabled' : payload.get('reachability_enabled'),
        }

        self._context = None
        self._solution = {
            'chat_service_sid': chat_service_sid or self._properties['chat_service_sid'],
        }

    @property
    def _proxy(self):
        if self._context is None:
            self._context = ConfigurationContext(
                self._version,
                chat_service_sid=self._solution['chat_service_sid'],
            )
        return self._context

    

    def __repr__(self):
        """
        Provide a friendly representation
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Conversations.V1.ConfigurationInstance {}>'.format(context)



